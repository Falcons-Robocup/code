#!/usr/bin/env python

# Coen Tempelaars, June 2019

# For description and usage hints, execute with '-h'


import argparse
import exceptions
import os
import subprocess


def parse_arguments():
    parser = argparse.ArgumentParser(
            description="Uploads all git-tracked, changed files or given list of files to all reachable robot(s) in given list of robots")
    parser.add_argument("-n", "--dryrun",   action="store_true",
            help="print to-be-executed commands, but do not execute")
    parser.add_argument("files", nargs='*',
            help="list of files with absolute or relative paths, for example: *.json /tmp/*.py ../config.txt")
    parser.add_argument("-r", "--robots",   type=str, default="r1,r2,r3,r4,r5,r6,r7",
            help="comma separated list of robots, for example: r1,r6,r3")
    return parser.parse_args()


def make_paths_absolute(paths):
    abs_paths = list()
    for path in paths:
        abs_paths.append(os.path.abspath(path))
    return abs_paths


def get_work_in_progress(dryrun):
    files = list()
    command = "git status --porcelain | grep -E '^ M|^A |^AM|^M |^RM|^MM' | awk '{print $NF}'"
    repository = "/home/robocup/falcons/code"
    output = subprocess.check_output(command, shell=True, cwd=repository)
    for line in output.splitlines():
        files.append(os.path.join(repository, line))
    repository = "/home/robocup/falcons/teamplayData"
    output = subprocess.check_output(command, shell=True, cwd=repository)
    for line in output.splitlines():
        files.append(os.path.join(repository, line))
    return files


def is_alive(hostname, dryrun):
    command = "ping -W 1 -c 1 {0} >/dev/null 2>/dev/null".format(hostname)

    if dryrun:
        print "Would have executed: %s" % command
        return True
    else:
        print "Executing: %s" % command
        return (os.system(command) == 0)


def upload(abspath, robot, dryrun):
    command = "scp {0} {1}:{0}".format(abspath, robot)

    if dryrun:
        print "Would have executed: %s" % command
    else:
        print "Executing: %s" % command
        result = os.system(command)
        if result != 0:
            raise RuntimeError("Failed to upload {0} to robot {1}".format(abspath, robot))


if __name__ == '__main__':
    config = parse_arguments()
    robots = list()
    files = list()

    for hostname in config.robots.split(','):
        if is_alive(hostname, config.dryrun):
            robots.append(hostname)

    if config.files:
        for path in config.files:
            files.append(path)
    else:
        files = get_work_in_progress(config.dryrun)

    files = make_paths_absolute(files)

    for robot in robots:
        for file in files:
            upload(file, robot, config.dryrun)

    if config.dryrun:
        print "Would have uploaded {0} files to {1} robots".format(len(files), len(robots))
    else:
        print "Upload successful. Uploaded {0} files to {1} robots".format(len(files), len(robots))
