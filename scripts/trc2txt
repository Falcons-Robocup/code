#!/usr/bin/env python


import sys
import argparse
import subprocess
import traceback


def parseLine(line):
    words = line.split()
    # ['0.141ms', '[', '0:12141512497116789209', ']', 'TRACE', '{"file":"visualizer/main.cpp","line":45,"msg":"initializing', 'PlaybackControl"}']
    # first element: timestamp in ms, appended with string 'ms'
    elapsedMs = int(float(words[0][:-2])) # we are typically not interested in sub-ms resolution... use GUI for this
    # ignore a few words, we are typically not interested in thread-id
    assert(words[1] == '[')
    assert(words[3] == ']')
    # type of trace, can be a number of things:
    # - legacy TRACE
    # - function stack PUSH (with signature, consists of 2 or more words)
    # - function stack POP (just 'wtf.scope#leave')
    # - WRITE_TRACE
    # - DETERMINE_TRACE_FILE
    if (words[4] == 'TRACE'):
        trctype = words[4]
        jsonargs = " ".join(words[5:])
    elif (words[4] == 'wtf.scope#leave'):
        trctype = words[4]
        jsonargs = " ".join(words[5:])
    else:
        # find start of jsonargs by looking for '{'
        trctype = words[4]
        pos = 5
        for w in words[5:]:
            if w[0] != '{':
                trctype += " " + w
            else:
                break
            pos += 1
        jsonargs = " ".join(words[pos:])
    # sanity check on this bit of parsing
    if len(jsonargs):
        assert(jsonargs[0] == '{')
    # output
    print "%6d %s %s" % (elapsedMs, trctype, jsonargs)
    #print "DEBUG ", line

def run(args):
    # TODO put dump.js somewhere in repo, also make sure nodejs is installed
    for f in args.trcfiles:
        cmd = "nodejs /home/robocup/zooi/tracing/tracing-framework/bin/dump.js " + f
        lines = subprocess.check_output(cmd, shell=True).splitlines()
        # strip first two lines 'Dumping file ...' and empty
        lines = lines[2:]
        # parse
        for line in lines:
            try:
                parseLine(line)
            except:
                sys.stderr.write("something went wrong when parsing the following line:\n")
                sys.stderr.write(line)
                traceback.print_exc()
                return


if __name__ == "__main__":
    # argument parsing
    parser     = argparse.ArgumentParser(description='convert wtf tracing to plain text')
    parser.add_argument('trcfiles', help='.wtf-trace file(s)', default=None, nargs='+')
    # some ideas for options
    #parser.add_argument('-s', '--stack', help='indent stack depth', action='store_true')
    #parser.add_argument('-b', '--brief', help='omit stack exits and standardize file/line output', action='store_true')
    args       = parser.parse_args()
    # execution
    run(args)

