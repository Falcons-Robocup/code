#!/usr/bin/env python3

import argparse
import os, shutil
from glob import glob


# constants
FALCONS_CODE_PATH = os.getenv("FALCONS_CODE_PATH")


def find_package_dirs(falcons_root):
    result = []
    # relative to falcons root
    os.chdir(falcons_root)
    # only descend into packages/, not tools/ peripherals/ etc.
    alldirs = glob("./packages/**/", recursive=True)
    for d in alldirs:
        # check that folder has a CMakeLists.txt
        c = d + "CMakeLists.txt"
        if os.path.isfile(c):
            result.append(d[2:]) # strip leading ./
    return result


def resolve_package_dir(name, package_dirs):
    candidates = []
    for d in package_dirs:
        if d.endswith('/' + name + '/'):
            candidates.append(d)
    if len(candidates) == 1:
        return candidates[0]
    return None


if __name__ == '__main__':
    # Argument parsing.
    descriptionTxt = 'List of all falcons packages to be built. When provided one package name, expand its full directory. This is used in fcd.\n'
    exampleTxt = 'Examples:\n   fdir rtdb\n   packages/facilities/rtdb'
    parser     = argparse.ArgumentParser(description=descriptionTxt, epilog=exampleTxt, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('name', help='optional package name to resolve', nargs='?')
    args       = parser.parse_args()

    # run
    package_dirs = find_package_dirs(FALCONS_CODE_PATH)
    if args.name:
        d = resolve_package_dir(args.name, package_dirs)
        if d:
            print(d.rstrip('/'))
        else:
            raise Exception("could not resolve a valid target directory from " + args.name)
    else:
        for d in package_dirs:
            print(d.rstrip('/'))

