#! /usr/bin/env python3

import argparse
import logging
import os
import subprocess
import time

VERSION = 2.3


def startRobot(team, robot):
    contextkey = '{}{}'.format(team, robot)
    logging.info('Starting processes for robot {}, team {}'.format(robot, team))
    subprocess.Popen(['jobStart', '{}_robotSim'.format(contextkey)])
    time.sleep(1.5) # TODO: make this more robust


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Starts Falcons simulator imersion {}'.format(VERSION))
    parser.add_argument('--noref', action="store_true",
           help="don't start refbox")
    parser.add_argument('-a', '--autoref', action="store_true",
           help='start an automatic referee instead of a refbox')
    parser.add_argument('-A', '--sizeTeamA', type=int, default=5,
           help='the size of team A')
    parser.add_argument('-B', '--sizeTeamB', type=int, default=5,
           help='the size of team B')
    args = parser.parse_args()

    logging.basicConfig(level=logging.INFO)
    logging.info('Falcons simulator version {}'.format(VERSION))

    os.putenv('SIMULATED', '1')
    os.putenv('TURTLE5K_ROBOTNUMBER', '0') # in case accidentally set on devlaptop (e.g. for robot vision diagnostics), this will cause problems down the road during simulation

    logging.info('Starting communication layer')
    subprocess.Popen(['rtdbClear'])
    subprocess.Popen(['createLogdir'])
    subprocess.Popen(['rtdbSimLink'])

    logging.info('Starting supporting processes')
    subprocess.Popen(['processStart', 'logger'])
    subprocess.Popen(['processStart', 'rtdbSync'])
    subprocess.Popen(['processStart', 'visualizer'])
    time.sleep(3)

    for i in range(args.sizeTeamA):
        startRobot('A', i+1)

    for i in range(args.sizeTeamB):
        startRobot('B', i+1)

    if args.autoref:
        logging.info('Starting autoref')
        arbiter = "autoref"
    else:
        arbiter = "user"

    if not args.autoref and not args.noref:
        logging.info('Starting refbox')
        subprocess.Popen(['processStart', 'refboxGui'])
        os.environ['REFBOX_HOST'] = "localhost"
        subprocess.Popen(['jobStart', 'A0_coachPart1']) # refboxRelayMTP for team A
        time.sleep(1) # TODO: leaving this out creates either a race condition for getting team B selected, or sometimes a refbox freeze
        subprocess.Popen(['jobStart', 'B0_coachPart1']) # refboxRelayMTP for team B

    logging.info('Starting simworld')
    os.environ['SIM_ARBITER'] = arbiter
    os.environ['SIM_SIZE_TEAM_A'] = str(args.sizeTeamA)
    os.environ['SIM_SIZE_TEAM_B'] = str(args.sizeTeamB)
    subprocess.Popen(['processStart', 'simworld'])

    logging.info('Starting execution')
    subprocess.Popen(['processStart', 'execution'])

    logging.info('Starting blockly')
    subprocess.Popen(['processStart', 'blockly'])

    logging.info('Falcons simulator started')
