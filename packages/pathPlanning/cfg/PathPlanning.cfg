#!/usr/bin/env python
PACKAGE = "pathPlanning"

import roslib;roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()


groups = ['normal', 'setpiece']

parameters = [
                ["Limiters_maxVelXY", double_t, 0, "Maximum velocity in XY direction in m/sec", 0, 0, 5],
                ["Limiters_maxVelXY_withBall", double_t, 0, "Maximum velocity in XY direction while having the ball in m/sec", 0, 0, 5],
                ["Limiters_maxVelPhi", double_t, 0, "Maximum velocity in rotation in rad/sec", 0, 0, 5],
                ["Limiters_maxVelPhi_withBall", double_t, 0, "Maximum velocity in rotation while having the ball in rad/sec", 0, 0, 5],
                ["Limiters_maxAccXY", double_t, 0, "Maximum acceleration in XY direction in m/sec", 0, 0, 500],
                ["Limiters_maxAccPhi", double_t, 0, "Maximum acceleration in rotation in rad/sec", 0, 0, 500],
                ["Limiters_tolerationXY", double_t, 0, "Position tolerance for XY in meters", 0, 0, 1],
                ["Limiters_tolerationPhi", double_t, 0, "Rotation tolerance for Phi in rad", 0, 0, 1],
                ["Limiters_relativeSpeedFactorX", double_t, 0, "Speed factor for relative velocity in X", 1.0, 0, 5.0],
                ["Limiters_relativeSpeedFactorY", double_t, 0, "Speed factor for relative velocity in Y", 1.0, 0, 5.0],
                ["Limiters_relativeSpeedFactorPhi", double_t, 0, "Speed factor for relative velocity in Phi", 1.0, 0, 5.0],
                ["Limiters_obstacleAvoidanceScalingFactor", double_t, 0, "Scaling factor for virtual object in ObstacleAvoidance", 1.0, 0.0, 100.0],
                ["Limiters_obstacleAvoidanceDistanceFactor", double_t, 0, "Distance factor for virtual object in ObstacleAvoidance", 1.0, 0.0, 100.0],
                ["Linear_gainXY", double_t, 0, "Gain for linear pathplanning XY", 1, 0, 10],
                ["Linear_gainPhi", double_t, 0, "Gain for linear pathplanning rotation", 1, 0, 5],
                ["PFMalgo_dist_lim", double_t, 0, "Distance beyond which obstacles are ignored", 3, 0, 10],
                ["PFMalgo_force_max", double_t, 0, "Maximum force component vector size", 10, 0, 100],
                ["PFMalgo_force_min", double_t, 0, "Cutoff force component vector size", 0.01, 0, 100],
                ["PFMalgo_expo_rep", double_t, 0, "Repulsive field strength (n in r^n)", 2.0, 0, 10],
                ["PFMalgo_mult_rep", double_t, 0, "Repulsive field per-obstacle factor", 1.0, 0, 100],
                ["PFMalgo_gain_rep", double_t, 0, "Repulsive aggregate factor", 1.0, 0, 100],
                ["PFMalgo_gain_attr", double_t, 0, "Attractive aggregate factor", 10.0, 0, 100],
                ["PIDalgo_X_P", double_t, 0, "P-value for X-PID", 0, 0, 100],
                ["PIDalgo_X_I", double_t, 0, "I-value for X-PID", 0, 0, 100],
                ["PIDalgo_X_D", double_t, 0, "D-value for X-PID", 0, 0, 100],
                ["PIDalgo_Y_P", double_t, 0, "P-value for Y-PID", 0, 0, 100],
                ["PIDalgo_Y_I", double_t, 0, "I-value for Y-PID", 0, 0, 100],
                ["PIDalgo_Y_D", double_t, 0, "D-value for Y-PID", 0, 0, 100],
                ["PIDalgo_XY_P", double_t, 0, "P-value for XY-PID", 0, 0, 100],
                ["PIDalgo_XY_I", double_t, 0, "I-value for XY-PID", 0, 0, 100],
                ["PIDalgo_XY_D", double_t, 0, "D-value for XY-PID", 0, 0, 100],
                ["PIDalgo_PHI_P", double_t, 0, "P-value for PHI-PID", 0, 0, 100],
                ["PIDalgo_PHI_I", double_t, 0, "I-value for PHI-PID", 0, 0, 100],
                ["PIDalgo_PHI_D", double_t, 0, "D-value for PHI-PID", 0, 0, 100],
                ["PIDalgo_maxI_XY", double_t, 0, "Maximum I value for XY PID", 0, 0.0, 100.0],
                ["PIDalgo_maxI_Phi", double_t, 0, "Maximum I value for Phi PID", 0, 0.0, 100.0],
                ["Brake_deceleration", double_t, 0, "Deceleration in m/s^2", 0, 0.0, 100.0],
                ["Brake_gamma", double_t, 0, "Gamma to multiply velocity with when braking", 0, 0.0, 100.0],
                ["TokyoDrift_radius", double_t, 0, "Radius to project the ball from the robot for Tokyo Drift", 0, 0.0, 100.0],
                ["TokyoDrift_step_angle", double_t, 0, "Angle (in rad) to project the subtarget for Tokyo Drift", 0, 0.0, 100.0],
                ["TokyoDrift_facing_target_tol", double_t, 0, "Tolerance when Tokyo Drift is no longer needed and a normal turn is done", 0, 0.0, 100.0]
             ]
             
for group in groups:
    newgroup = gen.add_group(group)
    for param in parameters:
        param_name = group + "_" + param[0]
        newgroup.add(param_name, param[1], param[2], param[3], param[4], param[5], param[6])
        #gen.add(param_name, param[1], param[2], param[3], param[4], param[5], param[6])

# Overrule config items
gen.add("Obstacle_avoidance_enabled", bool_t, 0, "Enabled obstacle avoidance on Robot", True)

# Fill in Config
#gen.add("Limiters_maxVelXY", double_t, 0, "Maximum velocity in XY direction in m/sec", 0, 0, 5)
#gen.add("Limiters_maxVelXY_withBall", double_t, 0, "Maximum velocity in XY direction while having the ball in m/sec", 0, 0, 5)
#gen.add("Limiters_maxVelPhi", double_t, 0, "Maximum velocity in rotation in rad/sec", 0, 0, 5)
#gen.add("Limiters_maxVelPhi_withBall", double_t, 0, "Maximum velocity in rotation while having the ball in rad/sec", 0, 0, 5)
#gen.add("Limiters_maxAccXY", double_t, 0, "Maximum acceleration in XY direction in m/sec", 0, 0, 500)
#gen.add("Limiters_maxAccPhi", double_t, 0, "Maximum acceleration in rotation in rad/sec", 0, 0, 500)
#gen.add("Limiters_tolerationXY", double_t, 0, "Position tolerance for XY in meters", 0, 0, 1)
#gen.add("Limiters_tolerationPhi", double_t, 0, "Rotation tolerance for Phi in rad", 0, 0, 1)
#gen.add("Linear_gainXY", double_t, 0, "Gain for linear pathplanning XY", 1, 0, 10)
#gen.add("Linear_gainPhi", double_t, 0, "Gain for linear pathplanning rotation", 1, 0, 5)
#gen.add("PFMalgo_dist_lim", double_t, 0, "Distance beyond which obstacles are ignored", 3, 0, 10)
#gen.add("PFMalgo_force_max", double_t, 0, "Maximum force component vector size", 10, 0, 100)
#gen.add("PFMalgo_force_min", double_t, 0, "Cutoff force component vector size", 0.01, 0, 100)
#gen.add("PFMalgo_expo_rep", double_t, 0, "Repulsive field strength (n in r^n)", 2.0, 0, 10)
#gen.add("PFMalgo_mult_rep", double_t, 0, "Repulsive field per-obstacle factor", 1.0, 0, 100)
#gen.add("PFMalgo_gain_rep", double_t, 0, "Repulsive aggregate factor", 1.0, 0, 100)
#gen.add("PFMalgo_gain_attr", double_t, 0, "Attractive aggregate factor", 10.0, 0, 100)
#gen.add("PIDalgo_X_P", double_t, 0, "P-value for X-PID", 0, 0, 100)
#gen.add("PIDalgo_X_I", double_t, 0, "I-value for X-PID", 0, 0, 100)
#gen.add("PIDalgo_X_D", double_t, 0, "D-value for X-PID", 0, 0, 100)
#gen.add("PIDalgo_Y_P", double_t, 0, "P-value for Y-PID", 0, 0, 100)
#gen.add("PIDalgo_Y_I", double_t, 0, "I-value for Y-PID", 0, 0, 100)
#gen.add("PIDalgo_Y_D", double_t, 0, "D-value for Y-PID", 0, 0, 100)
#gen.add("PIDalgo_XY_P", double_t, 0, "P-value for XY-PID", 0, 0, 100)
#gen.add("PIDalgo_XY_I", double_t, 0, "I-value for XY-PID", 0, 0, 100)
#gen.add("PIDalgo_XY_D", double_t, 0, "D-value for XY-PID", 0, 0, 100)
#gen.add("PIDalgo_PHI_P", double_t, 0, "P-value for PHI-PID", 0, 0, 100)
#gen.add("PIDalgo_PHI_I", double_t, 0, "I-value for PHI-PID", 0, 0, 100)
#gen.add("PIDalgo_PHI_D", double_t, 0, "D-value for PHI-PID", 0, 0, 100)
#gen.add("PIDalgo_Max_I_XY", double_t, 0, "Maximum I value for XY PID", 0, 0.0, 100.0)
#gen.add("PIDalgo_Max_I_Phi", double_t, 0, "Maximum I value for Phi PID", 0, 0.0, 100.0)
#gen.add("Brake_Deceleration", double_t, 0, "Deceleration in m/s^2", 0, 0.0, 100.0)
#gen.add("Brake_Gamma", double_t, 0, "Gamma to multiply velocity with when braking", 0, 0.0, 100.0)
#gen.add("Speed_factor_X", double_t, 0, "Speed factor for relative velocity in X", 1.0, 0, 5.0)
#gen.add("Speed_factor_Y", double_t, 0, "Speed factor for relative velocity in Y", 1.0, 0, 5.0)
#gen.add("Speed_factor_Phi", double_t, 0, "Speed factor for relative velocity in Phi", 1.0, 0, 5.0)
#gen.add("ObstacleAvoidance_scaling_factor", double_t, 0, "Scaling factor for virtual object in ObstacleAvoidance", 1.0, 0.0, 100.0)

# Create enum with which algorithm to use
#algo_enum = gen.enum([ gen.const("moveWhileTurning", int_t, 0, "Turn and move at the same time"),
#                  gen.const("turnThenMove", int_t, 1, "First turn then move"),
#                  gen.const("moveThenTurn", int_t, 2, "First move then turn"),
#                  gen.const("moveAtSpeed", int_t, 3, "Move in a direction at a certain speed"),
#                  gen.const("turn", int_t, 4, "Turn only")],
#                  "An enum to set which algorithm to use")
#gen.add("Algorithm_Type", int_t, 0, "Select the algorithm to be used via an Enum", 0, 0, 4, edit_method=algo_enum)
'''
gen.add("int_param", int_t, 0, "An Integer parameter", 50, 0, 100)
gen.add("double_param", double_t, 0, "A double parameter", .5, 0, 1)
gen.add("str_param", str_t, 0, "A string parameter", "Hello World")
gen.add("bool_param", bool_t, 0, "A Boolean parameter", True)

size_enum = gen.enum([ gen.const("Small", int_t, 0, "A small constant"),
                  gen.const("Medium", int_t, 1, "A medium constant"),
                  gen.const("Large", int_t, 2, "A large constant"),
                  gen.const("ExtraLarge", int_t, 3, "An extra large constant") ],
                  "An enum to set size")

gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)
'''

exit(gen.generate(PACKAGE, "PathPlanningNode", "PathPlanningNode"))
