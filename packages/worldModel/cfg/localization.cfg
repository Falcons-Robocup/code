#!/usr/bin/env python
PACKAGE = "worldModel"

import roslib;
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

gen.add("errorRatioRadianToMeter", double_t, 0, "Conversion factor radians to meters in pose score calculation", 0.5, 0.0, 2.0)
gen.add("visionOwnWeightFactor", double_t, 0, "Weight factor for vision update per heartbeat", 0.2, 0.0, 1.0)
gen.add("trackerScoreAcceptanceThreshold", double_t, 0, "Tracker threshold for accepting vision measurements", 1.5, 0.0, 5.0) 
gen.add("trackerTimeout", double_t, 0, "Timeout for maintaining localization trackers", 60.0, 0.0, 250.0)
gen.add("scoreActivityScale", double_t, 0, "Trackers sub-score scaling factor: good amount of vision measurements in buffer", 5.0, 0.0, 20.0)
gen.add("scoreAgeScale", double_t, 0, "Trackers sub-score scaling factor: good age of tracker", 20.0, 0.0, 50.0)
gen.add("scoreFreshScale", double_t, 0, "Trackers sub-score scaling factor: good freshness of tracker", 0.5, 0.0, 2.0)
gen.add("settlingTime", double_t, 0, "After going in play, give vision some time to settle", 3.0, 0.0, 10.0)
gen.add("minimumConfidence", double_t, 0, "Minimum confidence value for accepting vision candidate", 0.9, 0.0, 1.0)
gen.add("speedLimitXY", double_t, 0, "Sanity check on calculated speed", 5.0, 0.0, 6.0)
gen.add("speedLimitPhi", double_t, 0, "Sanity check on rotation speed", 6.0, 0.0, 15.0)
gen.add("positionLimitX", double_t, 0, "Sanity check on resulting position", 7.5, 0.0, 10.0)
gen.add("positionLimitY", double_t, 0, "Threshold for speed consistency check", 10.5, 0.0, 15.0)
gen.add("visionStabilityLength", int_t, 0, "Buffer length for vision stability KPI", 30, 0, 100)
 
exit(gen.generate(PACKAGE, "Localization", "localization"))

