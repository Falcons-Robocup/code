#!/usr/bin/env python
PACKAGE = "worldModel"

import roslib;
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

gen.add("confidenceOmniPref", bool_t, 0, "Confidence Omni Pref", False)
gen.add("solverCoreSpeed", bool_t, 0, "Solver Core Speed", False)
gen.add("useOwnHighVision", bool_t, 0, "Use own high vision", False)
gen.add("shareHighVision", bool_t, 0, "Use own high vision", False)
gen.add("useFriendlyHighVision", bool_t, 0, "Use high vision data from team mates", True)
gen.add("blackListDefault", bool_t, 0, "Accept a new tracker which has not yet been blacklisted", False)

gen.add("numberOfBallsWarningThreshold", int_t, 0, "An Integer parameter", 0, 0, 10)
gen.add("solverCoreMinVmeas", int_t, 0, "An Integer parameter", 0, 0, 100)
gen.add("solverBounceMinMeasurements", int_t, 0, "An Integer parameter", 0, 0, 100)
gen.add("confidenceNumCams", int_t, 0, "An Integer parameter", 0, 0, 5)
gen.add("confidenceMeasLim", int_t, 0, "An Integer parameter", 0, 0, 100)
gen.add("maxMaybeBalls", int_t, 0, "An Integer parameter", 0, 0, 3)
gen.add("measPerOrder", int_t, 0, "An Integer parameter", 0, 0, 20)
gen.add("outlierMaxIter", int_t, 0, "A Integer parameter", 1, 1, 5)

gen.add("groupingDt", double_t, 0, "A double parameter", 0.0, 0.0, 1.0)
gen.add("outlierNSigma", double_t, 0, "A double parameter", 0.0, 3.0, 6.0)
gen.add("outlierIterFraction", double_t, 0, "A double parameter", 0.1, 0.0, 1.0)
gen.add("solverTrackerConeTolerance", double_t, 0, "A double parameter", 0.0, 0.0, 10.0)
gen.add("solverTrackerTimeout", double_t, 0, "A double parameter", 0.0, 0.0, 5.0)
gen.add("solverTrackerBuffer", double_t, 0, "A double parameter", 0.0, 0.0, 5.0)
gen.add("solverCoreMinVdt", double_t, 0, "A double parameter", 0.0, 0.0, 10.0)
gen.add("solverCoreWeight", double_t, 0, "A double parameter", 0.0, 0.0, 1.0)
gen.add("solverBounceDt", double_t, 0, "A double parameter", 0.0, 0.0, 1.0)
gen.add("solverBounceAge", double_t, 0, "A double parameter", 0.0, 0.0, 1.0)
gen.add("solverMinDv", double_t, 0, "A double parameter", 0.0, 0.0, 10.0)
gen.add("confidenceFreshLim", double_t, 0, "A double parameter", 0.0, 0.0, 1.0)
gen.add("confidenceAgeLim", double_t, 0, "A double parameter", 0.0, 0.0, 10.0)
gen.add("confidenceFitLim1", double_t, 0, "A double parameter", 0.0, 0.0, 3.0)
gen.add("confidenceFitLim2", double_t, 0, "A double parameter", 0.0, 0.0, 3.0)
gen.add("confidenceVLim1", double_t, 0, "A double parameter", 0.0, 0.0, 5.0)
gen.add("confidenceVLim2", double_t, 0, "A double parameter", 0.0, 0.0, 20.0)
gen.add("confidenceZLim1", double_t, 0, "A double parameter", 0.0, 0.0, 3.0)
gen.add("confidenceZLim2", double_t, 0, "A double parameter", 0.0, 0.0, 7.0)
gen.add("confidenceGoodLimit", double_t, 0, "A double parameter", 0.0, 0.0, 1.0)
gen.add("confidenceMaybeLimit", double_t, 0, "A double parameter", 0.0, 0.0, 1.0)
gen.add("friendlyMeasurementsDistance", double_t, 0, "A double parameter", 0.0, 0.0, 5.0)
gen.add("blackListThresholdZ", double_t, 0, "A double parameter", 0.0, 0.4, 5.0)
gen.add("blackListFloatingDuration", double_t, 0, "A double parameter", 0.0, 0.4, 5.0)
gen.add("blackListGroundDuration", double_t, 0, "A double parameter", 0.0, 0.4, 5.0)
 
exit(gen.generate(PACKAGE, "BallTracker", "balltracker"))
