#!/usr/bin/env python
PACKAGE = "worldModelSync"

import roslib;roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

'''Grouping is not implemented yet in ROS'''
# Generate grouping
#config = gen.add_group("Config")

# Fill in Config
gen.add("multicastMixedAddress", str_t, 0, "IP-address to multicast to", "")
gen.add("multicastMixedPort", int_t, 0, "Portnumber to multicast to", 0, 0, 10000)
gen.add("allowLoop", bool_t, 0, "Receive own UDP packages", False)
gen.add("multicastHop", int_t, 0, "Number of hops to multicast to", 0, 0, 5)
gen.add("sendMixedTeam", bool_t, 0, "Transmit mixed team packages", False)
gen.add("groupID", int_t, 0, "ID for which group to sync with", 0, 0, 10)

'''
gen.add("int_param", int_t, 0, "An Integer parameter", 50, 0, 100)
gen.add("double_param", double_t, 0, "A double parameter", .5, 0, 1)
gen.add("str_param", str_t, 0, "A string parameter", "Hello World")
gen.add("bool_param", bool_t, 0, "A Boolean parameter", True)

size_enum = gen.enum([ gen.const("Small", int_t, 0, "A small constant"),
                  gen.const("Medium", int_t, 1, "A medium constant"),
                  gen.const("Large", int_t, 2, "A large constant"),
                  gen.const("ExtraLarge", int_t, 3, "An extra large constant") ],
                  "An enum to set size")

gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)
'''

exit(gen.generate(PACKAGE, "mixedTeam", "mixedteam"))
