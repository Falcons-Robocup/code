#!/usr/bin/env python
PACKAGE = "vision"

import roslib;roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

# Fill in Config
gen.add("ROS_rotate_camera", bool_t, 0, "Rotate compass 180 degrees due to wrongly mounted camera", False)
gen.add("Minimum_Location_age", double_t, 0, "Minimum age of the lock before location gets send to worldModel", 0.0, 0.0, 10.0) 

# Fill in Line
gen.add("Line_Hue_Center", int_t, 0, "", 0, 0, 179)
gen.add("Line_Hue_Delta", int_t, 0, "", 0, 0, 180)
gen.add("Line_Saturation_Min", int_t, 0, "", 0, 0, 255)
gen.add("Line_Saturation_Max", int_t, 0, "", 0, 0, 255)
gen.add("Line_Value_Min", int_t, 0, "", 0, 0, 255)
gen.add("Line_Value_Max", int_t, 0, "", 0, 0, 255)

# Fill in Ball
gen.add("Ball_Hue_Center", int_t, 0, "", 0, 0, 179)
gen.add("Ball_Hue_Delta", int_t, 0, "", 0, 0, 180)
gen.add("Ball_Saturation_Min", int_t, 0, "", 0, 0, 255)
gen.add("Ball_Saturation_Max", int_t, 0, "", 0, 0, 255)
gen.add("Ball_Value_Min", int_t, 0, "", 0, 0, 255)
gen.add("Ball_Value_Max", int_t, 0, "", 0, 0, 255)

# Fill in Obstacle
gen.add("Obstacle_Hue_Center", int_t, 0, "", 0, 0, 179)
gen.add("Obstacle_Hue_Delta", int_t, 0, "", 0, 0, 180)
gen.add("Obstacle_Saturation_Min", int_t, 0, "", 0, 0, 255)
gen.add("Obstacle_Saturation_Max", int_t, 0, "", 0, 0, 255)
gen.add("Obstacle_Value_Min", int_t, 0, "", 0, 0, 255)
gen.add("Obstacle_Value_Max", int_t, 0, "", 0, 0, 255)

'''
gen.add("int_param", int_t, 0, "An Integer parameter", 50, 0, 100)
gen.add("double_param", double_t, 0, "A double parameter", .5, 0, 1)
gen.add("str_param", str_t, 0, "A string parameter", "Hello World")
gen.add("bool_param", bool_t, 0, "A Boolean parameter", True)

size_enum = gen.enum([ gen.const("Small", int_t, 0, "A small constant"),
                  gen.const("Medium", int_t, 1, "A medium constant"),
                  gen.const("Large", int_t, 2, "A large constant"),
                  gen.const("ExtraLarge", int_t, 3, "An extra large constant") ],
                  "An enum to set size")

gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)
'''

exit(gen.generate(PACKAGE, "visionNode", "vision"))
