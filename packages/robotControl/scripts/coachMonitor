#!/bin/bash
#
# Standard coachControl communicates refbox commands and timestamps to robots. 
# Two instances cannot run in parallel ...
# This is a stripped version of coachControl: to monitor robots without interfering.
# Useful for people who want to look along and gather coach-like .rdl logging.
#



# no option parsing
teamchar=A # other not supported
jobnames="A0_coachPart1 A0_coachPart2Real"

# somewhat graceful exit
function finish {
    # first kill the logger, to prevent active .bag file with no content
    (
        pkill -2 logger
        sleep 1
    ) > /dev/null 2>&1
    # stop the jobs
    for j in $jobnames; do
        jobStop $j
    done
    # stop all processes
    processStopAll
}
trap finish EXIT
trap finish SIGINT

# clear RTDB
rtdbClear

# first time (teamA) only
if [ $teamchar != "B" ]; then

    # make logging directory for stdout, stderr and tracing
    createLogdir

    if [ "$tracing" = 1 ]; then
        # enable tracing
        set_tracing_trigger.sh `newest_logdir.py`
    fi

    # start roscore separately and sleep briefly so no nodes will complain about master not yet being available
    processStart roscore &
    sleep 3
fi

# tweak comm XML configuration to run in listen mode
commCfg=/home/robocup/falcons/code/packages/facilities/rtdb/config/rtdb2_configuration.xml
commCfgBak=$commCfg.bak
cp $commCfg $commCfgBak
sed -i 's/send="true"/send="false"/' $commCfg

# start coach processes
export TURTLE5K_TEAMNAME=team$teamchar
export ROS_NAMESPACE=${TURTLE5K_TEAMNAME}
for j in $jobnames; do
    jobStart $j &
done

# prompt
while :; do
    sleep 1
    echo "  q   : quit"
    echo -n "input command: "
    read ans
    if [ "$ans" = "q" ]; then
        echo "shutting down..."
        break
    fi
done

# restore comm configuration
mv $commCfgBak $commCfg

