#!/bin/bash
#
# This script controls the on-coach processes.
#
# JFEI 2015-12-29 creation
# MKOE 2016-05-17 change startup check needed for interactiveFieldSetup from reasoning_viewer file existence to ifs file existance

# do not allow running on robot
if onRobot ; then
    echo "do not run this script on robot"
    exit 1
fi

function usage() {
    echo "Usage:
  -r        Defines which computer runs the refbox { A | B | C | D | FALCONS | COACH }
Optional:
  -m        Enable monitoring mode"

}

function help_and_exit() {
    usage
    exit 1
}

# option parsing
while getopts "hmr:" opt; do
    case "$opt" in
    r)
        arg="$OPTARG"
        if [ -n "$OPTARG" ]; then
            if [ "$OPTARG" = "COACH" ]; then
                export REFBOX_HOST="localhost"
            elif [ "$OPTARG" = "A" ]; then
                export REFBOX_HOST="172.16.1.2"
            elif [ "$OPTARG" = "B" ]; then
                export REFBOX_HOST="172.16.2.2"
            elif [ "$OPTARG" = "C" ]; then
                export REFBOX_HOST="172.16.3.2"
            elif [ "$OPTARG" = "D" ]; then
                export REFBOX_HOST="172.16.4.2"
            elif [ "$OPTARG" = "FALCONS" ]; then
                export REFBOX_HOST="172.16.74.10"
            else
                echo "Unknown refbox computer $OPTARG!"
                help_and_exit
            fi
        else
            echo "Refbox option not correctly set!"
            help_and_exit
        fi
        ;;
    m)
        monitoring=1
        ;;
    h)
        help
        exit 0
        ;;
    :)
        help_and_exit
        ;;
    ?)
        help_and_exit
      ;;
    esac
done
shift "$(($OPTIND -1))"

if [ -z "$REFBOX_HOST" ]; then
    echo "Refbox option not correctly set!"
    help_and_exit
fi

jobnames=""

# prevent interfering with the real coach when we're just monitoring
if [ -z $monitoring ]; then
    jobnames="$jobnames A0_coachPart1"
fi

jobnames="$jobnames A0_coachPart2"

# somewhat graceful exit
function finish {
    # first kill the logger, to prevent active .bag file with no content
    (
        pkill -2 logger
        sleep 1
    ) > /dev/null 2>&1
    # stop the jobs
    for j in $jobnames; do
        jobStop $j
    done
    # stop all processes
    processStopAll
}
trap finish EXIT
trap finish SIGINT

# clear RTDB
rtdbClear

# Make symlinks of rtdb databases, so everything is read/written from one single database
rtdbSimLink

# make logging directory for stdout, stderr and tracing
createLogdir

if [ "$tracing" = 1 ]; then
    # enable tracing
    set_tracing_trigger.sh `newest_logdir.py`
fi

# start refbox GUI
if [ $REFBOX_HOST = "localhost" ] && [ -z $monitoring ]; then
    (
        processStart A0 refboxGui &
    ) < /dev/null >/dev/null 2>&1
fi

if [ -n $monitoring ]; then
    # tweak comm XML configuration to run in listen mode
    commCfg=/home/robocup/falcons/code/packages/facilities/rtdb/config/rtdb2_configuration.xml
    commCfgBak=$commCfg.bak
    cp $commCfg $commCfgBak
    sed -i 's/send="true"/send="false"/' $commCfg
fi

# start coach processes
for j in $jobnames; do
    jobStart $j &
done

# block?
# prompt
while :; do
    echo "  q   : Quit"
    echo -n "Input command: "
    read ans
    if [ "$ans" = "q" ]; then
        echo "Shutting down..."
        break
    fi
done


if [ -n $monitoring ]; then
    # restore comm configuration
    mv $commCfgBak $commCfg
fi

