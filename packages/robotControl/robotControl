#!/bin/bash
#
# This script controls a single robot instance.
#
# JFEI 2016-01-24 creation
# MKOE 2016-05-17 change startup check needed for interactiveFieldSetup from reasoning_viewer file existence to ifs file existance



# required argument
mode=$1
if [ -z "$mode" ]; then
    echo "ERROR: missing argument (start/stop/restart/daemon/status)"
    exit 1
fi

# real or sim mode? (some processes are specific)
jobname=robotReal
if [ "$SIMULATED" = "1" ]; then
    jobname=robotSim
fi

# handle mode
if [ "$mode" = "start" ]; then

    # setup environment
    source `which contextSet`

    # error in case job is already running
    if robotControl status | grep -q online; then
        echo "ERROR: software already started!"
        exit 1
    fi
    
    ## workaround for USB issues
    #if [ "$SIMULATED" = "0" ]; then
    #    echo asml | sudo -S /home/robocup/falcons/code/scripts/usbReset001d
    #fi
    
    # JFEI this does not yet work OK..?
    ## create new logdir
    #initTracing

    # start all required processes
    jobStart ${CONTEXTKEY}_$jobname & 
    if [ "$SIMULATED" = "1" ]; then
        # trigger old simulator
        simspawn.sh ${TURTLE5K_TEAMNAME}/robot${TURTLE5K_ROBOTNUMBER}
    else
        # apply config overrides
        configOverrideApply
    fi
    
    # old-teamplay-specific cmdChannel
    if [ -f "$TURTLEROOT/config/ifs" ]; then
        processStart ${CONTEXTKEY} commandChannelRobot & 
        processStart ${CONTEXTKEY} cmdChanProcFieldSetup &
    fi

    # trigger post-start scenario?
    if [ -f "$TURTLEROOT/config/postStart" ]; then
        # give software some time to boot & lock
        sleep 10
        # now start the script
        source $TURTLEROOT/config/postStart &
    fi
    
elif [ "$mode" = "stop" ]; then

    # stop processes
    jobStop ${CONTEXTKEY}_$jobname
    #if [ "$SIMULATED" = "1" ]; then
    #    # TODO: unspawn in simulator .. NOT YET IMPLEMENTED (rather leave as is, do it properly with Gazebo)
    #fi
    
    # kill any robotCLI instances
    pkill robotCLI
    
elif [ "$mode" = "restart" ]; then

    # restart processes
    # kill only in case there was already software running ...
    if robotControl status | grep -q online; then
        robotControl stop
        sleep 3
    fi
    robotControl start
    
elif [ "$mode" = "daemon" ]; then

    # start daemon, which listens to coach and is able to call start
    source `which contextSet` 
    processStart ${CONTEXTKEY} globalConfig &
    sleep 1
    processStart ${CONTEXTKEY} robotControl &
    # for teamB we do not need robotHealth
    
    if [ "$SIMULATED" != "1" ]; then
        processStart ${CONTEXTKEY} halIoBoard &
    fi

    if echo ${CONTEXTKEY} | grep -q "A"; then
        processStart ${CONTEXTKEY} robotHealth &
    fi

elif [ "$mode" = "status" ]; then

    # print a status string
    np=`processList | grep " $CONTEXTKEY " | wc -l`
    if [ $np = 3 ]; then
        echo "daemon only"
    elif [ $np -gt 5 ]; then
        echo "online"
    else
        echo "unknown"
    fi
    
else
    echo "ERROR: invalid mode '$mode'"
    exit 1
fi


