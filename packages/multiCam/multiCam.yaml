%YAML:1.0
global:
    dimensions : dimensionsDeLocht
    cameraWidth : 800
    cameraHeight : 608
    goodEnoughAngleToPixelRatio : 3.0 # error = xDelta + yDelta + angleToPixelRatio * rzDelta
    goodEnoughXDeltaKeepThreshold : 0.65 # in floor meters (double type)
    goodEnoughYDeltaKeepThreshold : 0.65 # in floor meters (double type)
    goodEnoughRzDeltaKeepThreshold : 40 # in degrees (int type)
    goodEnoughKeepWatchdog : 120 # @ 30fps change state to do not know where we are in 4 seconds
    goodEnoughNewMinAge : 80 #  
    goodEnoughNewThreshold : 0.40 # e.g. 0.17 for the score and 0.23 for the lifetime
    multicastFrequency : 5
    multicastIp : "224.16.32.74"
    multicastPort : 55555
    scoreThresHold : 0.050
    pixelToAngle : 25 # for azimuth and elevation when outside the dewarp area
    xHorizon : 392 # for elevation when outside the dewarp area
    locLatencyOffset : 30
    ballLatencyOffset : 50
    obstacleLatencyOffset : 50

# ASML Falcons De Locht Field
dimensionsDeLocht: # use definitions MSL specifications
    A : 18.000 # field width including lines (x)
    B : 12.000 # field height including lines (y)
    C :  6.506 # penalty area height including lines (y)
    D :  3.503 # goal area height including lines (y)
    E :  2.253 # penaly araa width including lines (x)
    F :  0.756 # goal area width including lines (x)
    G :  0.753 # corner circle radius including lines
    H :  4.002 # inner circle diameter including lines
    I :  3.052 # penalty mark distance (x) including line and mark
    J :  0.104 # penalty mark diameter
    K :  0.162 # center mark diameter
    goalWidth : 2.243 # # including goal posts
    goalDepth : 0.000 # 0.668 goalpost already marked as sunspot
    goalPostTichness : 0.108 # used by teamplay, not used by multiCam
    lineThickness : 0.130
    goalLineBorder : 0.75 # 1.500 exclude back side goal 0.760 # area outside white lines
    touchLineBorder : 1.00 # 1.499 allow robot's to get a lock when out of the field
    metersToPixels : 50
    remoteMetersToPixels : 32

# Demo field plaze burendag September 2019
dimensionsPlaza20190926: # use definitions MSL specifications
    A :  6.255 # field width including lines (x)
    B :  6.073 # field height including lines (y)
    C :  4.272 # penalty area height including lines (y)
    D :  3.179 # goal area height including lines (y)
    E :  1.284 # penaly araa width including lines (x)
    F :  0.493 # goal area width including lines (x)
    G :  0.483 # corner circle radius including lines
    H :  1.593 # inner circle diameter including lines
    I :  1.810 # penalty mark distance (x) including line and mark
    J :  0.137 # penalty mark diameter
    K :  0.134 # center mark diameter
    goalWidth        : 2.239 # including goal posts
    goalDepth        : 0.000 # 0.666 goalpost already marked as sunspot
    goalPostTichness : 0.126 # used by teamplay, not used by multiCam
    lineThickness    : 0.078
    goalLineBorder   : 0.750 # area outside white lines
    touchLineBorder  : 0.600 # allow robot's to get a lock when out of the field
    metersToPixels   : 50
    remoteMetersToPixels : 70

# Australia Sydney July 2019 (for now copied the values from Montreal)
dimensionsSydney: # use definitions for LARGE MSL specifications
    A : 21.995 # field width including lines (x)
    B : 13.997 # field height including lines (y)
    C :  6.901 # penalty area height including lines (y)
    D :  3.903 # goal area height including lines (y)
    E :  2.247 # penaly araa width including lines (x)
    F :  0.753 # goal area width including lines (x)
    G :  0.795 # corner circle radius including lines
    H :  4.001 # inner circle diameter including lines
    I :  3.634 # penalty mark distance (x) including line and mark
    J :  0.090 # penalty mark diameter
    K :  0.132 # center mark diameter
    goalWidth : 2.657 # # including goal posts
    goalDepth : 0.000 # 0.502 goalpost already marked as sunspot
    goalPostTichness : 0.124 # used by teamplay, not by vision
    lineThickness : 0.133
    goalLineBorder : 0.750 # 1.000 exclude back side goal # area outside white lines
    touchLineBorder : 1.000 # 1.00 allow robot's to get a lock when out of the field
    metersToPixels : 50
    remoteMetersToPixels : 26

# Portugal Port April 2019
dimensionsPorto2019: # use definitions for LARGE MSL specifications
    A : 18.141  # field width including lines (x)
    B : 12.146  # field height including lines (y)
    C :  6.624 # penalty area height including lines (y)
    D :  3.625 # goal area height including lines (y)
    E :  2.257 # penaly araa width including lines (x)
    F :  0.944 # goal area width including lines (x)
    G :  0.933 # corner circle radius including lines
    H :  4.259 # inner circle diameter including lines
    I :  3.132 # penalty mark distance (x) including line and mark
    J :  0.107 # penalty mark diameter
    K :  0.306 # center mark diameter
    goalW : 2.254 # # including goal posts
    goalDepth : 0.000 # 0.497 goalpost already marked as sunspot
    goalPostTichness : 0.108 # used by teamplay, not used by multiCam
    lineThickness : 0.135
    goalLineBorder : 0.750 # 1.424 exclude back side goal # area outside white lines
    touchLineBorder : 0.845 # allow robot's to get a lock when out of the field
    metersToPixels : 50
    remoteMetersToPixels : 31

# Canada Montreal June 2018
dimensionsMontreal: # use definitions for LARGE MSL specifications
    A : 22.165 # field width including lines (x)
    B : 14.150 # field height including lines (y)
    C :  6.906 # penalty area height including lines (y)
    D :  3.922 # goal area height including lines (y)
    E :  2.269 # penaly araa width including lines (x)
    F :  0.770 # goal area width including lines (x)
    G :  0.928 # corner circle radius including lines
    H :  4.031 # inner circle diameter including lines
    I :  3.030 # penalty mark distance (x) including line and mark
    J :  0.089 # penalty mark diameter
    K :  0.209 # center mark diameter
    goalWidth : 2.618 # # including goal posts
    goalDepth : 0.000 # 0.577 goalpost already marked as sunspot
    goalPostTichness : 0.108 # used by teamplay, not by vision
    lineThickness : 0.146
    goalLineBorder : 0.75 # 0.900 exclude back side goal # area outside white lines
    touchLineBorder : 1.00 # 0.905 allow robot's to get a lock when out of the field
    metersToPixels : 50
    remoteMetersToPixels : 32

# Canada Montreal June 2018, small half field
dimensionsMontrealSmall: # additional small field, only half 
    A : 11.680 # field width including lines (x)
    B : 10.000 # field height including lines (y)
    C :  6.510 # penalty area height including lines (y)
    D :  3.520 # goal area height including lines (y)
    E :  2.390 # penaly araa width including lines (x)
    F :  0.900 # goal area width including lines (x)
    G :  0.900 # corner circle radius including lines
    H :  2.110 # inner circle diameter including lines
    I :  3.190 # penalty mark distance (x) including line and mark
    J :  0.080 # penalty mark diameter
    K :  0.150 # center mark diameter
    goalWidth : 2.618 # # including goal posts
    goalDepth : 0.000 # 0.577 goalpost already marked as sunspot
    goalPostTichness : 0.108 # used by teamplay, not by vision
    lineThickness : 0.146
    goalLineBorder : 0.75 # 0.900 exclude back side goal # area outside white lines
    touchLineBorder : 1.00 # 0.905 allow robot's to get a lock when out of the field
    metersToPixels : 50
    remoteMetersToPixels : 32

# Torres Verdras Portugal April 2018
dimensionsTorresVedras: # use definitions MSL specifications
    A : 17.992 # field width including lines (x)
    B : 12.000 # field height including lines (y)
    C :  6.505 # penalty area height including lines (y)
    D :  3.508 # goal area height including lines (y)
    E :  2.326 # penaly araa width including lines (x)
    F :  0.757 # goal area width including lines (x)
    G :  0.753 # corner circle radius including lines
    H :  4.035 # inner circle diameter including lines
    I :  3.049 # penalty mark distance (x) including line and mark
    J :  0.108 # penalty mark diameter
    K :  0.167 # center mark diameter
    goalWidth : 2.278 # # including goal posts
    goalDepth : 0.000 # 0.668 goalpost already marked as sunspot
    lineThickness : 0.125
    goalLineBorder : 0.75 # 1.500 exclude back side goal 0.760 # area outside white lines
    touchLineBorder : 1.00 # 1.499 allow robot's to get a lock when out of the field
    metersToPixels : 50
    remoteMetersToPixels : 32

# Nagoya average of fiel a and field b (the field sizes are the same within 10mm)
# WARNING: do not forget to set the camera frequency to 60Hz
dimensionsNagoya: # use definitions MSL specifications
    A : 18.001 # field width including lines (x)
    B : 12.003 # field height including lines (y)
    C :  6.503 # penalty area height including lines (y)
    D :  3.502 # goal area height including lines (y)
    E :  2.252 # penaly araa width including lines (x)
    F :  0.760 # goal area width including lines (x)
    G :  0.760 # corner circle radius including lines
    H :  4.011 # inner circle diameter including lines
    I :  3.052 # penalty mark distance (x) including line and mark
    J :  0.103 # penalty mark diameter
    K :  0.130 # center mark diameter
    goalWidth : 2.255 # including goal posts
    goalDepth : 0.000 # 0.503 incuuding goal post, goalpost already marked as sunspot
    lineThickness : 0.132
    goalLineBorder : 1.00 # 1.333 exclude back side goal 0.760 # area outside white lines
    touchLineBorder : 1.00 # 1.213 allow robot's to get a lock when out of the field
    metersToPixels : 50
    remoteMetersToPixels : 31

# Coimbra Portugal
dimensionsCoimbra: # use definitions MSL specifications
    A : 17.985 # field width including lines (x)
    B : 11.995 # field height including lines (y)
    C : 6.495 # penalty area height including lines (y)
    D : 3.493 # goal area height including lines (y)
    E : 2.249 # penaly araa width including lines (x)
    F : 0.753 # goal area width including lines (x)
    G : 0.751 # corner circle radius including lines
    H : 3.978 # inner circle diameter including lines
    I : 3.054 # penalty mark distance (x) including line and mark
    J : 0.101 # penalty mark diameter (for rounding odd mm instead of even)
    K : 0.173 # center mark diameter (for rounding odd mm instead of even)
    goalWidth : 2.275 # including goal posts
    goalDepth : 0.000 # 0.619 no need for a goalpost in Leipzig (goal post is already marked as sunspot)
    lineThickness : 0.139
    goalLineBorder : 0.771 # 0.937 area outside white lines
    touchLineBorder : 0.778 # 0.967 allow robot's to get a lock when out of the field
    metersToPixels : 50
    remoteMetersToPixels : 32

# Liepzig Secondairy indoor field (almost same as main field)
dimensionsLeipzig: # use definitions MSL specifications
    A : 17.998 # field width including lines (x)
    B : 11.997 # field height including lines (y)
    C : 6.497 # penalty area height including lines (y)
    D : 3.503 # goal area height including lines (y)
    E : 2.254 # penaly araa width including lines (x)
    F : 0.758 # goal area width including lines (x)
    G : 0.880 # corner circle radius including lines
    H : 4.001 # inner circle diameter including lines
    I : 3.055 # penalty mark distance (x) including line and mark
    J : 0.101 # penalty mark diameter (for rounding odd mm instead of even)
    K : 0.163 # center mark diameter (for rounding odd mm instead of even)
    goalWidth : 2.258 # including goal posts
    goalDepth : 0.000 # no need for a goalpost in Leipzig (goal post is already marked as sunspot)
    lineThickness : 0.133
    goalLineBorder : 0.771 # area outside white lines
    touchLineBorder : 0.778 # allow robot's to get a lock when out of the field
    metersToPixels : 50
    remoteMetersToPixels : 32

# Portugal Robotica 2016 Field
dimensionsBraganca: # use definitions MSL specifications
    A : 18.000 # field width including lines (x)
    B : 12.499 # field height including lines (y)
    C : 6.512 # penalty area height including lines (y)
    D : 3.505 # goal area height including lines (y)
    E : 2.249 # penaly araa width including lines (x)
    F : 0.761 # goal area width including lines (x)
    G : 0.758 # corner circle radius including lines
    H : 4.002 # inner circle diameter including lines
    I : 3.057 # penalty mark distance (x) including line and mark
    J : 0.105 # penalty mark diameter
    K : 0.167 # center mark diameter
    goalWidth : 2.287 # location of the left and right goal pole (outside measured) APOX double check this in the locht!
    goalDepth : 0.3625 # 0.617 use not full depth length otherwise to much wrong locks
    lineThickness : 0.133
    goalLineBorder : 0.50 # 0.958 exclude back side goal 0.760 # area outside white lines
    touchLineBorder : 0.883 # allow robot's to get a lock when out of the field
    metersToPixels : 50
    remoteMetersToPixels : 32

# Evolution Dutch Open Field
dimensionsEvoluon: # use definitions MSL specifications
    A : 18.010 # field width including lines (x)
    B : 11.998 # field height including lines (y)
    C : 6.502 # penalty area height including lines (y)
    D : 3.505 # goal area height including lines (y)
    E : 2.257 # penaly araa width including lines (x)
    F : 0.767 # goal area width including lines (x)
    G : 0.753 # corner circle radius including lines
    H : 4.000 # inner circle diameter including lines
    I : 3.057 # penalty mark distance (x) including line and mark
    J : 0.104 # penalty mark diameter
    K : 0.160 # center mark diameter
    goalWidth : 2.203 # location of the left and right goal pole (outside measured) APOX double check this in the locht!
    goalDepth : 0.3625 # 0.709 use not full depth length otherwise to much wrong locks
    lineThickness : 0.130
    goalLineBorder : 0.50 # exclude back side goal 0.760 # area outside white lines
    touchLineBorder : 1.2 # allow robot's to get a lock when out of the field
    metersToPixels : 50
    remoteMetersToPixels : 32

# Hefei China Large fields (average of both fields)
dimensionsHefeiLarge: # use definitions MSL specifications
    A : 18.04 # field width including lines (x)
    B : 12.02 # field height including lines (y)
    C : 6.490 # penalty area height including lines (y)
    D : 3.503 # goal area height including lines (y)
    E : 2.246 # penaly araa width including lines (x)
    F : 0.755 # goal area width including lines (x)
    G : 0.768 # corner circle radius including lines
    H : 4.046 # inner circle diameter including lines
    I : 3.05 # penalty mark distance (x) including line and mark, does not exist on field
    J : 0.100001 # penalty mark diameter, does not exist on field
    K : 0.100001 # center mark diameter, does not exist on field
    goalWidth : 2.255 # location of the left and right goal pole
    goalDepth : 0.3625 # use not full depth length otherwise to much wrong locks
    lineThickness : 0.130
    goalLineBorder : 0.50 # exclude back side goal 0.760 # area outside white lines
    touchLineBorder : 0.75 # allow robot's to get a lock when out of the field
    metersToPixels : 50
    remoteMetersToPixels : 32

# Hefei China small field, used for challenge
dimensionsHefeiSmall: # use definitions MSL specifications
    A : 12.00 # field width including lines (x)
    B : 7.98 # field height including lines (y)
    C : 5.200 # penalty area height including lines (y)
    D : 3.294 # goal area height including lines (y)
    E : 1.699 # penaly araa width including lines (x)
    F : 0.762 # goal area width including lines (x)
    G : 0.400 # corner circle radius including lines, does not exist on field
    H : 2.027 # inner circle diameter including lines
    I : 2.000 # penalty mark distance (x) including line and mark, does not exist on field
    J : 0.100001 # penalty mark diameter, does not exist on field
    K : 0.100001 # center mark diameter, does not exist on field
    goalWidth : 2.248 # location of the left and right goal pole
    goalDepth : 0.3625 # use not full depth length otherwise to much wrong locks
    lineThickness : 0.105
    goalLineBorder : 0.50 # exclude back side goal 0.760 # area outside white lines
    touchLineBorder : 0.75 # allow robot's to get a lock when out of the field
    metersToPixels : 50
    remoteMetersToPixels : 32

# Falcons Demo Field dimensions including lines
dimensionsFalconsDemoFull: # use definitions MSL specifications
    A : 8.092 # field width including lines (x), measured by Thomas
    B : 6.082 # field height including lines (y), measured by Thomas
    C : 4.275 # penalty area height including lines (y), measured by Thomas
    D : 3.191 # goal area height including lines (y), measured by Thomas
    E : 1.287 # penaly araa width including lines (x), measured by Thomas
    F : 0.496 # goal area width including lines (x), measured by Thomas
    G : 0.484 # corner circle radius including lines, measured by Thomas
    H : 1.602 # inner circle diameter including lines, measured by Thomas
    I : 2.137 # penalty mark distance (x) including line and mark, unknown if measured/correct
    J : 0.131 # penalty mark diameter, unknown if measured/correct
    K : 0.131 # center mark diameter, measured by Thomas
    goalWidth : 1.975 # location of the left and right goal pole, unknown if measured/correct
    goalDepth : 0.2 # use not full depth length otherwise to much wrong locks, unknown if measured/correct
    lineThickness : 0.079 # unknown if measured/correct
    goalLineBorder : 0.304 # exclude back side goal 0.760 # area outside white lines
    touchLineBorder : 0.61 # allow robot's to get a lock when out of the field
    metersToPixels : 50
    remoteMetersToPixels : 32

# TechUnited Field dimensions including lines
dimensionsTechUnited: # use definitions MSL specifications
    A : 8.08 # field width including lines (x), measured by Thomas
    B : 6.09 # field height including lines (y), measured by Thomas
    C : 4.28 # penalty area height including lines (y), measured by Thomas
    D : 3.175 # goal area height including lines (y), measured by Thomas
    E : 1.28 # penaly araa width including lines (x), measured by Thomas
    F : 0.48 # goal area width including lines (x), measured by Thomas
    G : 0.48 # corner circle radius including lines, measured by Thomas
    H : 1.57 # inner circle diameter including lines, measured by Thomas
    I : 2.125 # penalty mark distance (x) including line and mark, unknown if measured/correct
    J : 0.100001 # penalty mark diameter, unknown if measured/correct
    K : 0.21 # center mark diameter, measured by Thomas
    goalWidth : 1.975 # location of the left and right goal pole, unknown if measured/correct
    goalDepth : 0.2 # use not full depth length otherwise to much wrong locks, unknown if measured/correct
    lineThickness : 0.125 # unknown if measured/correct
    goalLineBorder : 0.50 # exclude back side goal 0.760 # area outside white lines
    touchLineBorder : 0.75 # allow robot's to get a lock when out of the field
    metersToPixels : 50
    remoteMetersToPixels : 32

diagnostics:
    period : 5.0 # time in seconds between sending two images throug diagnostics, mind the bandwidth! (40kb per frame)
    jpgCompress : 40 # from 0 to 100. A lower value means smaller size.
    pngCompress : 9 # from 0 to 9. A higher value means a smaller size.

line:
    linePointsNumberMaximal : 100 # maximal amount of line points used as input search
    linePointsNumberMinimal : 40 # minimal amount of line points that have been used
    widthMin : 0 # minimal width of line in granularity of mm
    widthMax : 250 # maximal width of line in granularity of mm (max line width when robot on line)
    erodeSlider : 11 # set high so lines will excluded from the sun spot / goal
    dilateSlider : 16 # set high to be sure contour increases again after it has been reduced by erode, otherwise white line around contour
    goalRearMask : 200 # amount of pixels blocked by robot1 to prevent issues with the goal net
    goalRearDistance : 90 # maximal pixel distance from robot to goal line where mask is allowed
    goalRearAngle : 20 # angle offset in which the goal rear mask is allowed
    goalRearWatchdog : 100 # watchdog (in frames) removing mask when no new good enough position has been provided

ball:
    erodeSlider : 1 # remove the noise, keep low otherwise balls at 7 meters will be discarded, for above 8 meters it even need to be 0
    dilateSlider : 4
    pixels : 60 # minimal required pixels detected by camera : countNonZero(inRangeFrame(rect))
    pixelsNearby : 500 # minimal required pixels nearby robot (e.g. within 1 meter)
    xCenter : 30 # correct for ball diameter in millimeters

ballFar:
    # ballFar NOT USED YET
    erodeSlider : 1 # remove the noise, keep low otherwise balls at 7 meters will be discarded, for above 8 meters it even need to be 0
    dilateSlider : 4
    pixels : 20 # minimal required pixels detected by camera : countNonZero(inRangeFrame(rect))
    pixelsMax : 300 # maximal amount of pixels : countNonZero(inRangeFrame(rect))
    pixelsNearby : 500 # minimal required pixels nearby robot (e.g. within 1 meter)
    xCenter : 30 # correct for ball diameter in millimeters

possession: # ball possession parameters
    width : 100
    height : 25 # keep low to prevent near balls as possession, works together with yOffsetBallPossession
    threshold : 25 # minimum amount of pixel before signaling ball possession

obstacle:
    erodeSlider : 1 # erode function to seperate the robot from the border has been replaced by closest by filter
    dilateSlider : 1
    # pixel size quite high to prevent false obstacles created by shade of ball
    pixels : 500 # minimal required pixels detected by camera : countNonZero(inRangeFrame(rect))
    xCenter : 375 # correct for obstacle diameter in millimeters

# APOX todo: set to correct color
cyan:
    erodeSlider : 2 # remove the noise
    dilateSlider : 8
    pixels : 50 # minimal required pixels detected by camera : countNonZero(inRangeFrame(rect))
    xCenter : 300 # correct for cyan diameter in millimeters

# APOX todo: set to correct color
magenta:
    erodeSlider : 2 # remove the noise
    dilateSlider : 8
    pixels : 50 # minimal required pixels detected by camera : countNonZero(inRangeFrame(rect))
    xCenter : 300 # correct for magenta diameter in millimeters

red:
    erodeSlider : 2 # remove the noise
    dilateSlider : 8
    pixels : 50 # minimal required pixels detected by camera : countNonZero(inRangeFrame(rect))
    xCenter : 300 # correct for red diameter in millimeters

robot1:
    linePointDistance : 400 # in pixels, total camera is heigth 800 pixels
    linePointDistanceOffset : 25 # in pixels
    ballPossesionDistanceOffset : 27 # in pixels
    obstacleDistanceOffset : 65 # in pixels

    maskLeftFarAway : 10 # in pixels before the dewarp
    maskLeftCloseby : 10
    maskRightCloseby : 597 # height is 608 pixels
    maskRightFarAway : 10

    ballAzimuth : 65 # in degrees
    ballFarAzimuth : 65 # in degrees
    obstacleAzimuth : 50 # in degrees
    cyanAzimuth : 50 # in degrees
    magentaAzimuth : 50 # in degrees

    xExportOffset : 100 # align optical center to mechanical center, value as on slider, pixels offset = value - 100/10.0, default is 100
    yExportOffset : 100 # align optical center to mechanical center, value as on slider, pixels offset = value - 100/10.0, default is 100
    rzExportOffset : 100 # align optical center to mechanical center, value as on slider, angle offset = value - 100/10.0, default is 100
    rzBallExportOffset : 100 # align optical center to mechanical center, value as on slider, angle offset = value - 100/10.0, default is 100
    rzObstacleExportOffset : 100 # align optical center to mechanical center, value as on slider, angle offset = value - 100/10.0, default is 100

    goalPostIn : 0 # draw additional goal post projected outside the field
    goalPostOut : 0 # draw additional goal post projected outside the field

robot2:
    linePointDistance : 400 # in pixels, total camera is heigth 800 pixels
    linePointDistanceOffset : 25 # in pixels
    ballPossesionDistanceOffset : 8 # in pixels
    obstacleDistanceOffset : 8 # in pixels

    maskLeftFarAway : 149 # in pixels before the dewarp
    maskLeftCloseby : 241
    maskRightCloseby : 424 # height is 608 pixels
    maskRightFarAway : 156

    ballAzimuth : 65 # in degrees
    ballFarAzimuth : 65 # in degrees
    obstacleAzimuth : 50 # in degrees
    cyanAzimuth : 50 # in degrees
    magentaAzimuth : 50 # in degrees

    xExportOffset : 100 # align optical center to mechanical center, value as on slider, pixels offset = value - 100/10.0, default is 100
    yExportOffset : 100 # align optical center to mechanical center, value as on slider, pixels offset = value - 100/10.0, default is 100
    rzExportOffset : 100 # align optical center to mechanical center, value as on slider, angle offset = value - 100/10.0, default is 100
    rzBallExportOffset : 100 # align optical center to mechanical center, value as on slider, angle offset = value - 100/10.0, default is 100
    rzObstacleExportOffset : 100 # align optical center to mechanical center, value as on slider, angle offset = value - 100/10.0, default is 100

    goalPostIn : 0
    goalPostOut : 0

robot3:
    linePointDistance : 400 # in pixels, total camera is heigth 800 pixels
    linePointDistanceOffset : 25 # in pixels
    ballPossesionDistanceOffset : 10 # in pixels, in the test image there is something black near the robot
    obstacleDistanceOffset : 10 # in pixels

    maskLeftFarAway : 156 # in pixels before the dewarp
    maskLeftCloseby : 271
    maskRightCloseby : 468 # height is 608 pixels
    maskRightFarAway : 115

    ballAzimuth : 65 # in degrees
    ballFarAzimuth : 65 # in degrees
    obstacleAzimuth : 50 # in degrees
    cyanAzimuth : 50 # in degrees
    magentaAzimuth : 50 # in degrees


    xExportOffset : 100 # align optical center to mechanical center, value as on slider, pixels offset = value - 100/10.0, default is 100
    yExportOffset : 100 # align optical center to mechanical center, value as on slider, pixels offset = value - 100/10.0, default is 100
    rzExportOffset : 100 # align optical center to mechanical center, value as on slider, angle offset = value - 100/10.0, default is 100
    rzBallExportOffset : 100 # align optical center to mechanical center, value as on slider, angle offset = value - 100/10.0, default is 100
    rzObstacleExportOffset : 100 # align optical center to mechanical center, value as on slider, angle offset = value - 100/10.0, default is 100

    goalPostIn : 0
    goalPostOut : 0

robot4:
    linePointDistance : 400 # in pixels, total camera is heigth 800 pixels
    linePointDistanceOffset : 25 # in pixels
    ballPossesionDistanceOffset : 0 # in pixels
    obstacleDistanceOffset : 65 # in pixels

    maskLeftFarAway : 168 # in pixels before the dewarp
    maskLeftCloseby : 244
    maskRightCloseby : 436 # height is 608 pixels
    maskRightFarAway : 137

    ballAzimuth : 65 # in degrees
    ballFarAzimuth : 65 # in degrees
    obstacleAzimuth : 50 # in degrees
    cyanAzimuth : 50 # in degrees
    magentaAzimuth : 50 # in degrees

    xExportOffset : 100 # align optical center to mechanical center, value as on slider, pixels offset = value - 100/10.0, default is 100
    yExportOffset : 100 # align optical center to mechanical center, value as on slider, pixels offset = value - 100/10.0, default is 100
    rzExportOffset : 100 # align optical center to mechanical center, value as on slider, angle offset = value - 100/10.0, default is 100
    rzBallExportOffset : 100 # align optical center to mechanical center, value as on slider, angle offset = value - 100/10.0, default is 100
    rzObstacleExportOffset : 100 # align optical center to mechanical center, value as on slider, angle offset = value - 100/10.0, default is 100

    goalPostIn : 0
    goalPostOut : 0

robot5:
    linePointDistance : 400 # in pixels, total camera is heigth 800 pixels
    linePointDistanceOffset : 25 # in pixels
    ballPossesionDistanceOffset : 0 # in pixels
    obstacleDistanceOffset : 0 # in pixels

    maskLeftFarAway : 99 # in pixels before the dewarp
    maskLeftCloseby : 202
    maskRightCloseby : 460 # height is 608 pixels
    maskRightFarAway : 127

    ballAzimuth : 65 # in degrees
    ballFarAzimuth : 65 # in degrees
    obstacleAzimuth : 50 # in degrees
    cyanAzimuth : 50 # in degrees
    magentaAzimuth : 50 # in degrees

    xExportOffset : 100 # align optical center to mechanical center, value as on slider, pixels offset = value - 100/10.0, default is 100
    yExportOffset : 100 # align optical center to mechanical center, value as on slider, pixels offset = value - 100/10.0, default is 100
    rzExportOffset : 100 # align optical center to mechanical center, value as on slider, angle offset = value - 100/10.0, default is 100
    rzBallExportOffset : 100 # align optical center to mechanical center, value as on slider, angle offset = value - 100/10.0, default is 100
    rzObstacleExportOffset : 100 # align optical center to mechanical center, value as on slider, angle offset = value - 100/10.0, default is 100

    goalPostIn : 0
    goalPostOut : 0

robot6:
    linePointDistance : 400 # in pixels, total camera is heigth 800 pixels
    linePointDistanceOffset : 25 # in pixels
    ballPossesionDistanceOffset : 0 # in pixels
    obstacleDistanceOffset : 0 # in pixels

    maskLeftFarAway : 172 # in pixels before the dewarp
    maskLeftCloseby : 248
    maskRightCloseby : 403 # height is 608 pixels
    maskRightFarAway : 137

    ballAzimuth : 65 # in degrees
    ballFarAzimuth : 65 # in degrees
    obstacleAzimuth : 50 # in degrees
    cyanAzimuth : 50 # in degrees
    magentaAzimuth : 50 # in degrees

    xExportOffset : 100 # 113 # align optical center to mechanical center, value as on slider, pixels offset = value - 100/10.0, default is 100
    yExportOffset : 100 # 84 # align optical center to mechanical center, value as on slider, pixels offset = value - 100/10.0, default is 100
    rzExportOffset : 100 # 83 # align optical center to mechanical center, value as on slider, angle offset = value - 100/10.0, default is 100
    rzBallExportOffset : 100 # 69 # align optical center to mechanical center, value as on slider, angle offset = value - 100/10.0, default is 100
    rzObstacleExportOffset : 100 # align optical center to mechanical center, value as on slider, angle offset = value - 100/10.0, default is 100

    goalPostIn : 0
    goalPostOut : 0

robot7:
   linePointDistance : 400 # in pixels, total camera is heigth 800 pixels
   linePointDistanceOffset : 25 # in pixels
   ballPossesionDistanceOffset : 0 # in pixels
   obstacleDistanceOffset : 0 # in pixels

   maskLeftFarAway : 166 # in pixels before the dewarp
   maskLeftCloseby : 237
   maskRightCloseby : 391 # height is 608 pixels
   maskRightFarAway : 171

   ballAzimuth : 65 # in degrees
   ballFarAzimuth : 65 # in degrees
   obstacleAzimuth : 50 # in degrees
   cyanAzimuth : 50 # in degrees
   magentaAzimuth : 50 # in degrees

   xExportOffset : 100 # 113 # align optical center to mechanical center, value as on slider, pixels offset = value - 100/10.0, default is 100
   yExportOffset : 100 # 84 # align optical center to mechanical center, value as on slider, pixels offset = value - 100/10.0, default is 100
   rzExportOffset : 100 # 83 # align optical center to mechanical center, value as on slider, angle offset = value - 100/10.0, default is 100
   rzBallExportOffset : 100 # 69 # align optical center to mechanical center, value as on slider, angle offset = value - 100/10.0, default is 100
   rzObstacleExportOffset : 100 # align optical center to mechanical center, value as on slider, angle offset = value - 100/10.0, default is 100

   goalPostIn : 0
   goalPostOut : 0

# test environment, values copied from robot7
robot8:
   linePointDistance : 400 # in pixels, total camera is heigth 800 pixels
   linePointDistanceOffset : 25 # in pixels
   ballPossesionDistanceOffset : 0 # in pixels
   obstacleDistanceOffset : 0 # in pixels

   maskLeftFarAway : 166 # in pixels before the dewarp
   maskLeftCloseby : 237
   maskRightCloseby : 391 # height is 608 pixels
   maskRightFarAway : 171

   ballAzimuth : 65 # in degrees
   ballFarAzimuth : 65 # in degrees
   obstacleAzimuth : 50 # in degrees
   cyanAzimuth : 50 # in degrees
   magentaAzimuth : 50 # in degrees

   xExportOffset : 100 # 113 # align optical center to mechanical center, value as on slider, pixels offset = value - 100/10.0, default is 100
   yExportOffset : 100 # 84 # align optical center to mechanical center, value as on slider, pixels offset = value - 100/10.0, default is 100
   rzExportOffset : 100 # 83 # align optical center to mechanical center, value as on slider, angle offset = value - 100/10.0, default is 100
   rzBallExportOffset : 100 # 69 # align optical center to mechanical center, value as on slider, angle offset = value - 100/10.0, default is 100
   rzObstacleExportOffset : 100 # align optical center to mechanical center, value as on slider, angle offset = value - 100/10.0, default is 100

   goalPostIn : 0
   goalPostOut : 0

