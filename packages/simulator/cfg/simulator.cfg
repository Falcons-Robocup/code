#!/usr/bin/env python
PACKAGE = "simulator"

import roslib;
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

gen.add("debug_enabled",           bool_t,    0, "Enable or disable debugging", True)
gen.add("robot_size",              double_t,  0, "Robot diameter [m].", 0.50, 0.0, 100.0)
gen.add("goal_size",               double_t,  0, "Goal diameter [m].", 2.0, 0.0, 100.0)
gen.add("ball_size",               double_t,  0, "Ball diameter [m].", 0.22, 0.0, 100.0)
gen.add("field_size_x",            double_t,  0, "Field width [m].", 12, 0.0, 100.0)
gen.add("field_size_y",            double_t,  0, "Field length [m].", 18, 0.0, 100.0)
gen.add("edge_x",                  double_t,  0, "Side-field edge (top,bottom) [m].", 1.5, 0.0, 100.0)
gen.add("edge_y",                  double_t,  0, "Side-field edge (left,right) [m].", 1.5, 0.0, 100.0)
gen.add("pixels_per_meter_x",      double_t,  0, "Pixels per meter in x.", 40.0, 0.0, 1000.0)
gen.add("pixels_per_meter_y",      double_t,  0, "Pixels per meter in y.", 40.0, 0.0, 1000.0)
gen.add("spawn_grid_dx",           double_t,  0, "Spawn grid dx step [m].", 3.0, 0.0, 100.0)
gen.add("spawn_grid_dy",           double_t,  0, "Spawn grid dy step [m].", 2.0, 0.0, 100.0)
gen.add("spawn_grid_ox",           double_t,  0, "Spawn grid x origin [m].", -4.5, -7.3, 7.3)
gen.add("spawn_grid_oy",           double_t,  0, "Spawn grid y origin [m].", -7.5, -10.3, 10.3)
gen.add("spawn_grid_nx",           int_t,     0, "Spawn grid number of x steps.", 3, 0, 10)
gen.add("spawn_grid_ny",           int_t,     0, "Spawn grid number of y steps.", 3, 0, 10)
gen.add("ball_with_robot_radius",  double_t,  0, "Relative position of ball to robot, for dribbling.", 0.80, 0.0, 1.5)
gen.add("ball_capture_radius",     double_t,  0, "Capture radius of a robot: if ball is within this radius from robot mouth, it sticks.", 0.10, 0.0, 1.0)
gen.add("ball_bump_factor",        double_t,  0, "Bump velocity reduction: velocity is multiplied with this factor per collision.", 0.92, 0.0, 1.2)
gen.add("ball_friction",           double_t,  0, "Friction drag: velocity is multiplied with this factor per iteration.", 0.975, 0.0, 1.2)
gen.add("ball_friction_eps",       double_t,  0, "Friction threshold: set velocity to zero in case it drops below.", 0.1, 0.0, 0.1)
gen.add("team1_left_to_right",     bool_t,    0, "Is team 1 playing from left to right?", True)

exit(gen.generate(PACKAGE, "simulatorCfgNode", "simulator"))


