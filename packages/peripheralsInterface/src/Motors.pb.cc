// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Motors.proto

#include "int/Motors.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_Motors_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BallhandlerAngles_Motors_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Motors_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RobotVector_Motors_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Motors_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Status_Motors_2eproto;
namespace motors {
class EmptyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Empty> _instance;
} _Empty_default_instance_;
class StatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Status> _instance;
} _Status_default_instance_;
class BallhandlerAnglesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BallhandlerAngles> _instance;
} _BallhandlerAngles_default_instance_;
class RobotVectorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RobotVector> _instance;
} _RobotVector_default_instance_;
class MotorVectorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MotorVector> _instance;
} _MotorVector_default_instance_;
class MotorPIDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MotorPID> _instance;
} _MotorPID_default_instance_;
class PublishDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Publish> _instance;
} _Publish_default_instance_;
}  // namespace motors
static void InitDefaultsEmpty_Motors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::motors::_Empty_default_instance_;
    new (ptr) ::motors::Empty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::motors::Empty::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Empty_Motors_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEmpty_Motors_2eproto}, {}};

static void InitDefaultsStatus_Motors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::motors::_Status_default_instance_;
    new (ptr) ::motors::Status();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::motors::Status::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Status_Motors_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStatus_Motors_2eproto}, {}};

static void InitDefaultsBallhandlerAngles_Motors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::motors::_BallhandlerAngles_default_instance_;
    new (ptr) ::motors::BallhandlerAngles();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::motors::BallhandlerAngles::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BallhandlerAngles_Motors_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBallhandlerAngles_Motors_2eproto}, {}};

static void InitDefaultsRobotVector_Motors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::motors::_RobotVector_default_instance_;
    new (ptr) ::motors::RobotVector();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::motors::RobotVector::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RobotVector_Motors_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRobotVector_Motors_2eproto}, {}};

static void InitDefaultsMotorVector_Motors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::motors::_MotorVector_default_instance_;
    new (ptr) ::motors::MotorVector();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::motors::MotorVector::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MotorVector_Motors_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMotorVector_Motors_2eproto}, {}};

static void InitDefaultsMotorPID_Motors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::motors::_MotorPID_default_instance_;
    new (ptr) ::motors::MotorPID();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::motors::MotorPID::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MotorPID_Motors_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMotorPID_Motors_2eproto}, {}};

static void InitDefaultsPublish_Motors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::motors::_Publish_default_instance_;
    new (ptr) ::motors::Publish();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::motors::Publish::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Publish_Motors_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsPublish_Motors_2eproto}, {
      &scc_info_Status_Motors_2eproto.base,
      &scc_info_BallhandlerAngles_Motors_2eproto.base,
      &scc_info_RobotVector_Motors_2eproto.base,}};

void InitDefaults_Motors_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Empty_Motors_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Status_Motors_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BallhandlerAngles_Motors_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RobotVector_Motors_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MotorVector_Motors_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MotorPID_Motors_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Publish_Motors_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_Motors_2eproto[7];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_Motors_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_Motors_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_Motors_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::motors::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::motors::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::motors::Status, enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::motors::BallhandlerAngles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::motors::BallhandlerAngles, right_),
  PROTOBUF_FIELD_OFFSET(::motors::BallhandlerAngles, left_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::motors::RobotVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::motors::RobotVector, x_),
  PROTOBUF_FIELD_OFFSET(::motors::RobotVector, y_),
  PROTOBUF_FIELD_OFFSET(::motors::RobotVector, phi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::motors::MotorVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::motors::MotorVector, ballhandler_motor_right_),
  PROTOBUF_FIELD_OFFSET(::motors::MotorVector, ballhandler_motor_left_),
  PROTOBUF_FIELD_OFFSET(::motors::MotorVector, drive_motor_right_),
  PROTOBUF_FIELD_OFFSET(::motors::MotorVector, drive_motor_left_),
  PROTOBUF_FIELD_OFFSET(::motors::MotorVector, drive_motor_rear_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::motors::MotorPID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::motors::MotorPID, p_gain_),
  PROTOBUF_FIELD_OFFSET(::motors::MotorPID, i_gain_),
  PROTOBUF_FIELD_OFFSET(::motors::MotorPID, ff_velocity_gain_),
  PROTOBUF_FIELD_OFFSET(::motors::MotorPID, ff_acceleration_gain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::motors::Publish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::motors::Publish, ballhandlers_enabled_),
  PROTOBUF_FIELD_OFFSET(::motors::Publish, ballhandler_angles_),
  PROTOBUF_FIELD_OFFSET(::motors::Publish, ballhandler_angle_setpoints_),
  PROTOBUF_FIELD_OFFSET(::motors::Publish, drive_motors_enabled_),
  PROTOBUF_FIELD_OFFSET(::motors::Publish, robot_velocity_),
  PROTOBUF_FIELD_OFFSET(::motors::Publish, robot_position_),
  PROTOBUF_FIELD_OFFSET(::motors::Publish, robot_velocity_setpoint_),
  PROTOBUF_FIELD_OFFSET(::motors::Publish, software_on_),
  PROTOBUF_FIELD_OFFSET(::motors::Publish, inplay_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::motors::Empty)},
  { 5, -1, sizeof(::motors::Status)},
  { 11, -1, sizeof(::motors::BallhandlerAngles)},
  { 18, -1, sizeof(::motors::RobotVector)},
  { 26, -1, sizeof(::motors::MotorVector)},
  { 36, -1, sizeof(::motors::MotorPID)},
  { 45, -1, sizeof(::motors::Publish)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::motors::_Empty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::motors::_Status_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::motors::_BallhandlerAngles_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::motors::_RobotVector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::motors::_MotorVector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::motors::_MotorPID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::motors::_Publish_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_Motors_2eproto = {
  {}, AddDescriptors_Motors_2eproto, "Motors.proto", schemas,
  file_default_instances, TableStruct_Motors_2eproto::offsets,
  file_level_metadata_Motors_2eproto, 7, file_level_enum_descriptors_Motors_2eproto, file_level_service_descriptors_Motors_2eproto,
};

const char descriptor_table_protodef_Motors_2eproto[] =
  "\n\014Motors.proto\022\006motors\"\007\n\005Empty\"\031\n\006Statu"
  "s\022\017\n\007enabled\030\001 \001(\010\"0\n\021BallhandlerAngles\022"
  "\r\n\005right\030\001 \001(\002\022\014\n\004left\030\002 \001(\002\"0\n\013RobotVec"
  "tor\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\013\n\003phi\030\003 \001(\002\"\235"
  "\001\n\013MotorVector\022\037\n\027ballhandler_motor_righ"
  "t\030\001 \001(\002\022\036\n\026ballhandler_motor_left\030\002 \001(\002\022"
  "\031\n\021drive_motor_right\030\003 \001(\002\022\030\n\020drive_moto"
  "r_left\030\004 \001(\002\022\030\n\020drive_motor_rear\030\005 \001(\002\"b"
  "\n\010MotorPID\022\016\n\006p_gain\030\001 \001(\r\022\016\n\006i_gain\030\002 \001"
  "(\r\022\030\n\020ff_velocity_gain\030\003 \001(\r\022\034\n\024ff_accel"
  "eration_gain\030\004 \001(\r\"\261\003\n\007Publish\022,\n\024ballha"
  "ndlers_enabled\030\001 \001(\0132\016.motors.Status\0225\n\022"
  "ballhandler_angles\030\002 \001(\0132\031.motors.Ballha"
  "ndlerAngles\022>\n\033ballhandler_angle_setpoin"
  "ts\030\003 \001(\0132\031.motors.BallhandlerAngles\022,\n\024d"
  "rive_motors_enabled\030\004 \001(\0132\016.motors.Statu"
  "s\022+\n\016robot_velocity\030\005 \001(\0132\023.motors.Robot"
  "Vector\022+\n\016robot_position\030\006 \001(\0132\023.motors."
  "RobotVector\0224\n\027robot_velocity_setpoint\030\007"
  " \001(\0132\023.motors.RobotVector\022#\n\013software_on"
  "\030\010 \001(\0132\016.motors.Status\022\036\n\006inplay\030\t \001(\0132\016"
  ".motors.Status2\260\010\n\006Motors\0225\n\023enable_ball"
  "handlers\022\r.motors.Empty\032\r.motors.Empty\"\000"
  "\0226\n\024disable_ballhandlers\022\r.motors.Empty\032"
  "\r.motors.Empty\"\000\022:\n\027is_ballhandlers_enab"
  "led\022\r.motors.Empty\032\016.motors.Status\"\000\022D\n\026"
  "get_ballhandler_angles\022\r.motors.Empty\032\031."
  "motors.BallhandlerAngles\"\000\022M\n\037get_ballha"
  "ndler_angle_setpoints\022\r.motors.Empty\032\031.m"
  "otors.BallhandlerAngles\"\000\022M\n\037set_ballhan"
  "dler_angle_setpoints\022\031.motors.Ballhandle"
  "rAngles\032\r.motors.Empty\"\000\0229\n\024get_ballhand"
  "lers_pid\022\r.motors.Empty\032\020.motors.MotorPI"
  "D\"\000\0229\n\024set_ballhandlers_pid\022\020.motors.Mot"
  "orPID\032\r.motors.Empty\"\000\0225\n\023enable_drive_m"
  "otors\022\r.motors.Empty\032\r.motors.Empty\"\000\0226\n"
  "\024disable_drive_motors\022\r.motors.Empty\032\r.m"
  "otors.Empty\"\000\022:\n\027is_drive_motors_enabled"
  "\022\r.motors.Empty\032\016.motors.Status\"\000\022:\n\022get"
  "_robot_velocity\022\r.motors.Empty\032\023.motors."
  "RobotVector\"\000\022:\n\022get_robot_position\022\r.mo"
  "tors.Empty\032\023.motors.RobotVector\"\000\022C\n\033get"
  "_robot_velocity_setpoint\022\r.motors.Empty\032"
  "\023.motors.RobotVector\"\000\022C\n\033set_robot_velo"
  "city_setpoint\022\023.motors.RobotVector\032\r.mot"
  "ors.Empty\"\000\0229\n\024get_drive_motors_pid\022\r.mo"
  "tors.Empty\032\020.motors.MotorPID\"\000\0229\n\024set_dr"
  "ive_motors_pid\022\020.motors.MotorPID\032\r.motor"
  "s.Empty\"\000b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_Motors_2eproto = {
  false, InitDefaults_Motors_2eproto, 
  descriptor_table_protodef_Motors_2eproto,
  "Motors.proto", &assign_descriptors_table_Motors_2eproto, 1937,
};

void AddDescriptors_Motors_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_Motors_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Motors_2eproto = []() { AddDescriptors_Motors_2eproto(); return true; }();
namespace motors {

// ===================================================================

void Empty::InitAsDefaultInstance() {
}
class Empty::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Empty::Empty()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motors.Empty)
}
Empty::Empty(const Empty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:motors.Empty)
}

void Empty::SharedCtor() {
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:motors.Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
}

void Empty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Empty& Empty::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Empty_Motors_2eproto.base);
  return *internal_default_instance();
}


void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:motors.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Empty::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Empty*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Empty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motors.Empty)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:motors.Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motors.Empty)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Empty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motors.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motors.Empty)
}

::google::protobuf::uint8* Empty::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motors.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motors.Empty)
  return target;
}

size_t Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:motors.Empty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Empty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:motors.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const Empty* source =
      ::google::protobuf::DynamicCastToGenerated<Empty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:motors.Empty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:motors.Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:motors.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Empty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:motors.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:motors.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {
  return true;
}

void Empty::Swap(Empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Empty::InternalSwap(Empty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Empty::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Motors_2eproto);
  return ::file_level_metadata_Motors_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Status::InitAsDefaultInstance() {
}
class Status::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Status::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Status::Status()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motors.Status)
}
Status::Status(const Status& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:motors.Status)
}

void Status::SharedCtor() {
  enabled_ = false;
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:motors.Status)
  SharedDtor();
}

void Status::SharedDtor() {
}

void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Status& Status::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Status_Motors_2eproto.base);
  return *internal_default_instance();
}


void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:motors.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Status::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Status*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motors.Status)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motors.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motors.Status)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motors.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motors.Status)
}

::google::protobuf::uint8* Status::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motors.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motors.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:motors.Status)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:motors.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::google::protobuf::DynamicCastToGenerated<Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:motors.Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:motors.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:motors.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:motors.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:motors.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::Swap(Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Status::InternalSwap(Status* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(enabled_, other->enabled_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Motors_2eproto);
  return ::file_level_metadata_Motors_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BallhandlerAngles::InitAsDefaultInstance() {
}
class BallhandlerAngles::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BallhandlerAngles::kRightFieldNumber;
const int BallhandlerAngles::kLeftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BallhandlerAngles::BallhandlerAngles()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motors.BallhandlerAngles)
}
BallhandlerAngles::BallhandlerAngles(const BallhandlerAngles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&right_, &from.right_,
    static_cast<size_t>(reinterpret_cast<char*>(&left_) -
    reinterpret_cast<char*>(&right_)) + sizeof(left_));
  // @@protoc_insertion_point(copy_constructor:motors.BallhandlerAngles)
}

void BallhandlerAngles::SharedCtor() {
  ::memset(&right_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&left_) -
      reinterpret_cast<char*>(&right_)) + sizeof(left_));
}

BallhandlerAngles::~BallhandlerAngles() {
  // @@protoc_insertion_point(destructor:motors.BallhandlerAngles)
  SharedDtor();
}

void BallhandlerAngles::SharedDtor() {
}

void BallhandlerAngles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BallhandlerAngles& BallhandlerAngles::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BallhandlerAngles_Motors_2eproto.base);
  return *internal_default_instance();
}


void BallhandlerAngles::Clear() {
// @@protoc_insertion_point(message_clear_start:motors.BallhandlerAngles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&right_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&left_) -
      reinterpret_cast<char*>(&right_)) + sizeof(left_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BallhandlerAngles::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BallhandlerAngles*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // float right = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_right(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float left = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_left(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BallhandlerAngles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motors.BallhandlerAngles)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float right = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float left = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motors.BallhandlerAngles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motors.BallhandlerAngles)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BallhandlerAngles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motors.BallhandlerAngles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float right = 1;
  if (this->right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->right(), output);
  }

  // float left = 2;
  if (this->left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->left(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motors.BallhandlerAngles)
}

::google::protobuf::uint8* BallhandlerAngles::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motors.BallhandlerAngles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float right = 1;
  if (this->right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->right(), target);
  }

  // float left = 2;
  if (this->left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->left(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motors.BallhandlerAngles)
  return target;
}

size_t BallhandlerAngles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:motors.BallhandlerAngles)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float right = 1;
  if (this->right() != 0) {
    total_size += 1 + 4;
  }

  // float left = 2;
  if (this->left() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BallhandlerAngles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:motors.BallhandlerAngles)
  GOOGLE_DCHECK_NE(&from, this);
  const BallhandlerAngles* source =
      ::google::protobuf::DynamicCastToGenerated<BallhandlerAngles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:motors.BallhandlerAngles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:motors.BallhandlerAngles)
    MergeFrom(*source);
  }
}

void BallhandlerAngles::MergeFrom(const BallhandlerAngles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:motors.BallhandlerAngles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.right() != 0) {
    set_right(from.right());
  }
  if (from.left() != 0) {
    set_left(from.left());
  }
}

void BallhandlerAngles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:motors.BallhandlerAngles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallhandlerAngles::CopyFrom(const BallhandlerAngles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:motors.BallhandlerAngles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallhandlerAngles::IsInitialized() const {
  return true;
}

void BallhandlerAngles::Swap(BallhandlerAngles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BallhandlerAngles::InternalSwap(BallhandlerAngles* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(right_, other->right_);
  swap(left_, other->left_);
}

::google::protobuf::Metadata BallhandlerAngles::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Motors_2eproto);
  return ::file_level_metadata_Motors_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RobotVector::InitAsDefaultInstance() {
}
class RobotVector::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotVector::kXFieldNumber;
const int RobotVector::kYFieldNumber;
const int RobotVector::kPhiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotVector::RobotVector()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motors.RobotVector)
}
RobotVector::RobotVector(const RobotVector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&phi_) -
    reinterpret_cast<char*>(&x_)) + sizeof(phi_));
  // @@protoc_insertion_point(copy_constructor:motors.RobotVector)
}

void RobotVector::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phi_) -
      reinterpret_cast<char*>(&x_)) + sizeof(phi_));
}

RobotVector::~RobotVector() {
  // @@protoc_insertion_point(destructor:motors.RobotVector)
  SharedDtor();
}

void RobotVector::SharedDtor() {
}

void RobotVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotVector& RobotVector::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RobotVector_Motors_2eproto.base);
  return *internal_default_instance();
}


void RobotVector::Clear() {
// @@protoc_insertion_point(message_clear_start:motors.RobotVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phi_) -
      reinterpret_cast<char*>(&x_)) + sizeof(phi_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RobotVector::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RobotVector*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float phi = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_phi(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RobotVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motors.RobotVector)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float phi = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motors.RobotVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motors.RobotVector)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RobotVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motors.RobotVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float phi = 3;
  if (this->phi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->phi(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motors.RobotVector)
}

::google::protobuf::uint8* RobotVector::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motors.RobotVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float phi = 3;
  if (this->phi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->phi(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motors.RobotVector)
  return target;
}

size_t RobotVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:motors.RobotVector)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float phi = 3;
  if (this->phi() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotVector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:motors.RobotVector)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotVector* source =
      ::google::protobuf::DynamicCastToGenerated<RobotVector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:motors.RobotVector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:motors.RobotVector)
    MergeFrom(*source);
  }
}

void RobotVector::MergeFrom(const RobotVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:motors.RobotVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.phi() != 0) {
    set_phi(from.phi());
  }
}

void RobotVector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:motors.RobotVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotVector::CopyFrom(const RobotVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:motors.RobotVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotVector::IsInitialized() const {
  return true;
}

void RobotVector::Swap(RobotVector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotVector::InternalSwap(RobotVector* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(phi_, other->phi_);
}

::google::protobuf::Metadata RobotVector::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Motors_2eproto);
  return ::file_level_metadata_Motors_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MotorVector::InitAsDefaultInstance() {
}
class MotorVector::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MotorVector::kBallhandlerMotorRightFieldNumber;
const int MotorVector::kBallhandlerMotorLeftFieldNumber;
const int MotorVector::kDriveMotorRightFieldNumber;
const int MotorVector::kDriveMotorLeftFieldNumber;
const int MotorVector::kDriveMotorRearFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MotorVector::MotorVector()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motors.MotorVector)
}
MotorVector::MotorVector(const MotorVector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ballhandler_motor_right_, &from.ballhandler_motor_right_,
    static_cast<size_t>(reinterpret_cast<char*>(&drive_motor_rear_) -
    reinterpret_cast<char*>(&ballhandler_motor_right_)) + sizeof(drive_motor_rear_));
  // @@protoc_insertion_point(copy_constructor:motors.MotorVector)
}

void MotorVector::SharedCtor() {
  ::memset(&ballhandler_motor_right_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&drive_motor_rear_) -
      reinterpret_cast<char*>(&ballhandler_motor_right_)) + sizeof(drive_motor_rear_));
}

MotorVector::~MotorVector() {
  // @@protoc_insertion_point(destructor:motors.MotorVector)
  SharedDtor();
}

void MotorVector::SharedDtor() {
}

void MotorVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MotorVector& MotorVector::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MotorVector_Motors_2eproto.base);
  return *internal_default_instance();
}


void MotorVector::Clear() {
// @@protoc_insertion_point(message_clear_start:motors.MotorVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ballhandler_motor_right_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&drive_motor_rear_) -
      reinterpret_cast<char*>(&ballhandler_motor_right_)) + sizeof(drive_motor_rear_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MotorVector::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MotorVector*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // float ballhandler_motor_right = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_ballhandler_motor_right(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float ballhandler_motor_left = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_ballhandler_motor_left(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float drive_motor_right = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_drive_motor_right(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float drive_motor_left = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_drive_motor_left(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float drive_motor_rear = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_drive_motor_rear(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MotorVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motors.MotorVector)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float ballhandler_motor_right = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ballhandler_motor_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ballhandler_motor_left = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ballhandler_motor_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float drive_motor_right = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &drive_motor_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float drive_motor_left = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &drive_motor_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float drive_motor_rear = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &drive_motor_rear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motors.MotorVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motors.MotorVector)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MotorVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motors.MotorVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float ballhandler_motor_right = 1;
  if (this->ballhandler_motor_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->ballhandler_motor_right(), output);
  }

  // float ballhandler_motor_left = 2;
  if (this->ballhandler_motor_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->ballhandler_motor_left(), output);
  }

  // float drive_motor_right = 3;
  if (this->drive_motor_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->drive_motor_right(), output);
  }

  // float drive_motor_left = 4;
  if (this->drive_motor_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->drive_motor_left(), output);
  }

  // float drive_motor_rear = 5;
  if (this->drive_motor_rear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->drive_motor_rear(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motors.MotorVector)
}

::google::protobuf::uint8* MotorVector::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motors.MotorVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float ballhandler_motor_right = 1;
  if (this->ballhandler_motor_right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->ballhandler_motor_right(), target);
  }

  // float ballhandler_motor_left = 2;
  if (this->ballhandler_motor_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->ballhandler_motor_left(), target);
  }

  // float drive_motor_right = 3;
  if (this->drive_motor_right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->drive_motor_right(), target);
  }

  // float drive_motor_left = 4;
  if (this->drive_motor_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->drive_motor_left(), target);
  }

  // float drive_motor_rear = 5;
  if (this->drive_motor_rear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->drive_motor_rear(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motors.MotorVector)
  return target;
}

size_t MotorVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:motors.MotorVector)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float ballhandler_motor_right = 1;
  if (this->ballhandler_motor_right() != 0) {
    total_size += 1 + 4;
  }

  // float ballhandler_motor_left = 2;
  if (this->ballhandler_motor_left() != 0) {
    total_size += 1 + 4;
  }

  // float drive_motor_right = 3;
  if (this->drive_motor_right() != 0) {
    total_size += 1 + 4;
  }

  // float drive_motor_left = 4;
  if (this->drive_motor_left() != 0) {
    total_size += 1 + 4;
  }

  // float drive_motor_rear = 5;
  if (this->drive_motor_rear() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotorVector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:motors.MotorVector)
  GOOGLE_DCHECK_NE(&from, this);
  const MotorVector* source =
      ::google::protobuf::DynamicCastToGenerated<MotorVector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:motors.MotorVector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:motors.MotorVector)
    MergeFrom(*source);
  }
}

void MotorVector::MergeFrom(const MotorVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:motors.MotorVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ballhandler_motor_right() != 0) {
    set_ballhandler_motor_right(from.ballhandler_motor_right());
  }
  if (from.ballhandler_motor_left() != 0) {
    set_ballhandler_motor_left(from.ballhandler_motor_left());
  }
  if (from.drive_motor_right() != 0) {
    set_drive_motor_right(from.drive_motor_right());
  }
  if (from.drive_motor_left() != 0) {
    set_drive_motor_left(from.drive_motor_left());
  }
  if (from.drive_motor_rear() != 0) {
    set_drive_motor_rear(from.drive_motor_rear());
  }
}

void MotorVector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:motors.MotorVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotorVector::CopyFrom(const MotorVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:motors.MotorVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotorVector::IsInitialized() const {
  return true;
}

void MotorVector::Swap(MotorVector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MotorVector::InternalSwap(MotorVector* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ballhandler_motor_right_, other->ballhandler_motor_right_);
  swap(ballhandler_motor_left_, other->ballhandler_motor_left_);
  swap(drive_motor_right_, other->drive_motor_right_);
  swap(drive_motor_left_, other->drive_motor_left_);
  swap(drive_motor_rear_, other->drive_motor_rear_);
}

::google::protobuf::Metadata MotorVector::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Motors_2eproto);
  return ::file_level_metadata_Motors_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MotorPID::InitAsDefaultInstance() {
}
class MotorPID::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MotorPID::kPGainFieldNumber;
const int MotorPID::kIGainFieldNumber;
const int MotorPID::kFfVelocityGainFieldNumber;
const int MotorPID::kFfAccelerationGainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MotorPID::MotorPID()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motors.MotorPID)
}
MotorPID::MotorPID(const MotorPID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&p_gain_, &from.p_gain_,
    static_cast<size_t>(reinterpret_cast<char*>(&ff_acceleration_gain_) -
    reinterpret_cast<char*>(&p_gain_)) + sizeof(ff_acceleration_gain_));
  // @@protoc_insertion_point(copy_constructor:motors.MotorPID)
}

void MotorPID::SharedCtor() {
  ::memset(&p_gain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ff_acceleration_gain_) -
      reinterpret_cast<char*>(&p_gain_)) + sizeof(ff_acceleration_gain_));
}

MotorPID::~MotorPID() {
  // @@protoc_insertion_point(destructor:motors.MotorPID)
  SharedDtor();
}

void MotorPID::SharedDtor() {
}

void MotorPID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MotorPID& MotorPID::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MotorPID_Motors_2eproto.base);
  return *internal_default_instance();
}


void MotorPID::Clear() {
// @@protoc_insertion_point(message_clear_start:motors.MotorPID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&p_gain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ff_acceleration_gain_) -
      reinterpret_cast<char*>(&p_gain_)) + sizeof(ff_acceleration_gain_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MotorPID::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MotorPID*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 p_gain = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_p_gain(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 i_gain = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_i_gain(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 ff_velocity_gain = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_ff_velocity_gain(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 ff_acceleration_gain = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_ff_acceleration_gain(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MotorPID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motors.MotorPID)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 p_gain = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &p_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 i_gain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &i_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ff_velocity_gain = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ff_velocity_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ff_acceleration_gain = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ff_acceleration_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motors.MotorPID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motors.MotorPID)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MotorPID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motors.MotorPID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 p_gain = 1;
  if (this->p_gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->p_gain(), output);
  }

  // uint32 i_gain = 2;
  if (this->i_gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->i_gain(), output);
  }

  // uint32 ff_velocity_gain = 3;
  if (this->ff_velocity_gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ff_velocity_gain(), output);
  }

  // uint32 ff_acceleration_gain = 4;
  if (this->ff_acceleration_gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ff_acceleration_gain(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motors.MotorPID)
}

::google::protobuf::uint8* MotorPID::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motors.MotorPID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 p_gain = 1;
  if (this->p_gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->p_gain(), target);
  }

  // uint32 i_gain = 2;
  if (this->i_gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->i_gain(), target);
  }

  // uint32 ff_velocity_gain = 3;
  if (this->ff_velocity_gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ff_velocity_gain(), target);
  }

  // uint32 ff_acceleration_gain = 4;
  if (this->ff_acceleration_gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ff_acceleration_gain(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motors.MotorPID)
  return target;
}

size_t MotorPID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:motors.MotorPID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 p_gain = 1;
  if (this->p_gain() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->p_gain());
  }

  // uint32 i_gain = 2;
  if (this->i_gain() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->i_gain());
  }

  // uint32 ff_velocity_gain = 3;
  if (this->ff_velocity_gain() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ff_velocity_gain());
  }

  // uint32 ff_acceleration_gain = 4;
  if (this->ff_acceleration_gain() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ff_acceleration_gain());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotorPID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:motors.MotorPID)
  GOOGLE_DCHECK_NE(&from, this);
  const MotorPID* source =
      ::google::protobuf::DynamicCastToGenerated<MotorPID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:motors.MotorPID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:motors.MotorPID)
    MergeFrom(*source);
  }
}

void MotorPID::MergeFrom(const MotorPID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:motors.MotorPID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.p_gain() != 0) {
    set_p_gain(from.p_gain());
  }
  if (from.i_gain() != 0) {
    set_i_gain(from.i_gain());
  }
  if (from.ff_velocity_gain() != 0) {
    set_ff_velocity_gain(from.ff_velocity_gain());
  }
  if (from.ff_acceleration_gain() != 0) {
    set_ff_acceleration_gain(from.ff_acceleration_gain());
  }
}

void MotorPID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:motors.MotorPID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotorPID::CopyFrom(const MotorPID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:motors.MotorPID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotorPID::IsInitialized() const {
  return true;
}

void MotorPID::Swap(MotorPID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MotorPID::InternalSwap(MotorPID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(p_gain_, other->p_gain_);
  swap(i_gain_, other->i_gain_);
  swap(ff_velocity_gain_, other->ff_velocity_gain_);
  swap(ff_acceleration_gain_, other->ff_acceleration_gain_);
}

::google::protobuf::Metadata MotorPID::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Motors_2eproto);
  return ::file_level_metadata_Motors_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Publish::InitAsDefaultInstance() {
  ::motors::_Publish_default_instance_._instance.get_mutable()->ballhandlers_enabled_ = const_cast< ::motors::Status*>(
      ::motors::Status::internal_default_instance());
  ::motors::_Publish_default_instance_._instance.get_mutable()->ballhandler_angles_ = const_cast< ::motors::BallhandlerAngles*>(
      ::motors::BallhandlerAngles::internal_default_instance());
  ::motors::_Publish_default_instance_._instance.get_mutable()->ballhandler_angle_setpoints_ = const_cast< ::motors::BallhandlerAngles*>(
      ::motors::BallhandlerAngles::internal_default_instance());
  ::motors::_Publish_default_instance_._instance.get_mutable()->drive_motors_enabled_ = const_cast< ::motors::Status*>(
      ::motors::Status::internal_default_instance());
  ::motors::_Publish_default_instance_._instance.get_mutable()->robot_velocity_ = const_cast< ::motors::RobotVector*>(
      ::motors::RobotVector::internal_default_instance());
  ::motors::_Publish_default_instance_._instance.get_mutable()->robot_position_ = const_cast< ::motors::RobotVector*>(
      ::motors::RobotVector::internal_default_instance());
  ::motors::_Publish_default_instance_._instance.get_mutable()->robot_velocity_setpoint_ = const_cast< ::motors::RobotVector*>(
      ::motors::RobotVector::internal_default_instance());
  ::motors::_Publish_default_instance_._instance.get_mutable()->software_on_ = const_cast< ::motors::Status*>(
      ::motors::Status::internal_default_instance());
  ::motors::_Publish_default_instance_._instance.get_mutable()->inplay_ = const_cast< ::motors::Status*>(
      ::motors::Status::internal_default_instance());
}
class Publish::HasBitSetters {
 public:
  static const ::motors::Status& ballhandlers_enabled(const Publish* msg);
  static const ::motors::BallhandlerAngles& ballhandler_angles(const Publish* msg);
  static const ::motors::BallhandlerAngles& ballhandler_angle_setpoints(const Publish* msg);
  static const ::motors::Status& drive_motors_enabled(const Publish* msg);
  static const ::motors::RobotVector& robot_velocity(const Publish* msg);
  static const ::motors::RobotVector& robot_position(const Publish* msg);
  static const ::motors::RobotVector& robot_velocity_setpoint(const Publish* msg);
  static const ::motors::Status& software_on(const Publish* msg);
  static const ::motors::Status& inplay(const Publish* msg);
};

const ::motors::Status&
Publish::HasBitSetters::ballhandlers_enabled(const Publish* msg) {
  return *msg->ballhandlers_enabled_;
}
const ::motors::BallhandlerAngles&
Publish::HasBitSetters::ballhandler_angles(const Publish* msg) {
  return *msg->ballhandler_angles_;
}
const ::motors::BallhandlerAngles&
Publish::HasBitSetters::ballhandler_angle_setpoints(const Publish* msg) {
  return *msg->ballhandler_angle_setpoints_;
}
const ::motors::Status&
Publish::HasBitSetters::drive_motors_enabled(const Publish* msg) {
  return *msg->drive_motors_enabled_;
}
const ::motors::RobotVector&
Publish::HasBitSetters::robot_velocity(const Publish* msg) {
  return *msg->robot_velocity_;
}
const ::motors::RobotVector&
Publish::HasBitSetters::robot_position(const Publish* msg) {
  return *msg->robot_position_;
}
const ::motors::RobotVector&
Publish::HasBitSetters::robot_velocity_setpoint(const Publish* msg) {
  return *msg->robot_velocity_setpoint_;
}
const ::motors::Status&
Publish::HasBitSetters::software_on(const Publish* msg) {
  return *msg->software_on_;
}
const ::motors::Status&
Publish::HasBitSetters::inplay(const Publish* msg) {
  return *msg->inplay_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Publish::kBallhandlersEnabledFieldNumber;
const int Publish::kBallhandlerAnglesFieldNumber;
const int Publish::kBallhandlerAngleSetpointsFieldNumber;
const int Publish::kDriveMotorsEnabledFieldNumber;
const int Publish::kRobotVelocityFieldNumber;
const int Publish::kRobotPositionFieldNumber;
const int Publish::kRobotVelocitySetpointFieldNumber;
const int Publish::kSoftwareOnFieldNumber;
const int Publish::kInplayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Publish::Publish()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:motors.Publish)
}
Publish::Publish(const Publish& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ballhandlers_enabled()) {
    ballhandlers_enabled_ = new ::motors::Status(*from.ballhandlers_enabled_);
  } else {
    ballhandlers_enabled_ = nullptr;
  }
  if (from.has_ballhandler_angles()) {
    ballhandler_angles_ = new ::motors::BallhandlerAngles(*from.ballhandler_angles_);
  } else {
    ballhandler_angles_ = nullptr;
  }
  if (from.has_ballhandler_angle_setpoints()) {
    ballhandler_angle_setpoints_ = new ::motors::BallhandlerAngles(*from.ballhandler_angle_setpoints_);
  } else {
    ballhandler_angle_setpoints_ = nullptr;
  }
  if (from.has_drive_motors_enabled()) {
    drive_motors_enabled_ = new ::motors::Status(*from.drive_motors_enabled_);
  } else {
    drive_motors_enabled_ = nullptr;
  }
  if (from.has_robot_velocity()) {
    robot_velocity_ = new ::motors::RobotVector(*from.robot_velocity_);
  } else {
    robot_velocity_ = nullptr;
  }
  if (from.has_robot_position()) {
    robot_position_ = new ::motors::RobotVector(*from.robot_position_);
  } else {
    robot_position_ = nullptr;
  }
  if (from.has_robot_velocity_setpoint()) {
    robot_velocity_setpoint_ = new ::motors::RobotVector(*from.robot_velocity_setpoint_);
  } else {
    robot_velocity_setpoint_ = nullptr;
  }
  if (from.has_software_on()) {
    software_on_ = new ::motors::Status(*from.software_on_);
  } else {
    software_on_ = nullptr;
  }
  if (from.has_inplay()) {
    inplay_ = new ::motors::Status(*from.inplay_);
  } else {
    inplay_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:motors.Publish)
}

void Publish::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Publish_Motors_2eproto.base);
  ::memset(&ballhandlers_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inplay_) -
      reinterpret_cast<char*>(&ballhandlers_enabled_)) + sizeof(inplay_));
}

Publish::~Publish() {
  // @@protoc_insertion_point(destructor:motors.Publish)
  SharedDtor();
}

void Publish::SharedDtor() {
  if (this != internal_default_instance()) delete ballhandlers_enabled_;
  if (this != internal_default_instance()) delete ballhandler_angles_;
  if (this != internal_default_instance()) delete ballhandler_angle_setpoints_;
  if (this != internal_default_instance()) delete drive_motors_enabled_;
  if (this != internal_default_instance()) delete robot_velocity_;
  if (this != internal_default_instance()) delete robot_position_;
  if (this != internal_default_instance()) delete robot_velocity_setpoint_;
  if (this != internal_default_instance()) delete software_on_;
  if (this != internal_default_instance()) delete inplay_;
}

void Publish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Publish& Publish::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Publish_Motors_2eproto.base);
  return *internal_default_instance();
}


void Publish::Clear() {
// @@protoc_insertion_point(message_clear_start:motors.Publish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ballhandlers_enabled_ != nullptr) {
    delete ballhandlers_enabled_;
  }
  ballhandlers_enabled_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ballhandler_angles_ != nullptr) {
    delete ballhandler_angles_;
  }
  ballhandler_angles_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ballhandler_angle_setpoints_ != nullptr) {
    delete ballhandler_angle_setpoints_;
  }
  ballhandler_angle_setpoints_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && drive_motors_enabled_ != nullptr) {
    delete drive_motors_enabled_;
  }
  drive_motors_enabled_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && robot_velocity_ != nullptr) {
    delete robot_velocity_;
  }
  robot_velocity_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && robot_position_ != nullptr) {
    delete robot_position_;
  }
  robot_position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && robot_velocity_setpoint_ != nullptr) {
    delete robot_velocity_setpoint_;
  }
  robot_velocity_setpoint_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && software_on_ != nullptr) {
    delete software_on_;
  }
  software_on_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && inplay_ != nullptr) {
    delete inplay_;
  }
  inplay_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Publish::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Publish*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .motors.Status ballhandlers_enabled = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::motors::Status::_InternalParse;
        object = msg->mutable_ballhandlers_enabled();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .motors.BallhandlerAngles ballhandler_angles = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::motors::BallhandlerAngles::_InternalParse;
        object = msg->mutable_ballhandler_angles();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .motors.BallhandlerAngles ballhandler_angle_setpoints = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::motors::BallhandlerAngles::_InternalParse;
        object = msg->mutable_ballhandler_angle_setpoints();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .motors.Status drive_motors_enabled = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::motors::Status::_InternalParse;
        object = msg->mutable_drive_motors_enabled();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .motors.RobotVector robot_velocity = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::motors::RobotVector::_InternalParse;
        object = msg->mutable_robot_velocity();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .motors.RobotVector robot_position = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::motors::RobotVector::_InternalParse;
        object = msg->mutable_robot_position();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .motors.RobotVector robot_velocity_setpoint = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::motors::RobotVector::_InternalParse;
        object = msg->mutable_robot_velocity_setpoint();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .motors.Status software_on = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::motors::Status::_InternalParse;
        object = msg->mutable_software_on();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .motors.Status inplay = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::motors::Status::_InternalParse;
        object = msg->mutable_inplay();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Publish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:motors.Publish)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .motors.Status ballhandlers_enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ballhandlers_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .motors.BallhandlerAngles ballhandler_angles = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ballhandler_angles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .motors.BallhandlerAngles ballhandler_angle_setpoints = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ballhandler_angle_setpoints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .motors.Status drive_motors_enabled = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_drive_motors_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .motors.RobotVector robot_velocity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_robot_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .motors.RobotVector robot_position = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_robot_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .motors.RobotVector robot_velocity_setpoint = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_robot_velocity_setpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .motors.Status software_on = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_software_on()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .motors.Status inplay = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inplay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:motors.Publish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:motors.Publish)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Publish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:motors.Publish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .motors.Status ballhandlers_enabled = 1;
  if (this->has_ballhandlers_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ballhandlers_enabled(this), output);
  }

  // .motors.BallhandlerAngles ballhandler_angles = 2;
  if (this->has_ballhandler_angles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ballhandler_angles(this), output);
  }

  // .motors.BallhandlerAngles ballhandler_angle_setpoints = 3;
  if (this->has_ballhandler_angle_setpoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::ballhandler_angle_setpoints(this), output);
  }

  // .motors.Status drive_motors_enabled = 4;
  if (this->has_drive_motors_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::drive_motors_enabled(this), output);
  }

  // .motors.RobotVector robot_velocity = 5;
  if (this->has_robot_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::robot_velocity(this), output);
  }

  // .motors.RobotVector robot_position = 6;
  if (this->has_robot_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::robot_position(this), output);
  }

  // .motors.RobotVector robot_velocity_setpoint = 7;
  if (this->has_robot_velocity_setpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::robot_velocity_setpoint(this), output);
  }

  // .motors.Status software_on = 8;
  if (this->has_software_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::software_on(this), output);
  }

  // .motors.Status inplay = 9;
  if (this->has_inplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::inplay(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:motors.Publish)
}

::google::protobuf::uint8* Publish::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:motors.Publish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .motors.Status ballhandlers_enabled = 1;
  if (this->has_ballhandlers_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ballhandlers_enabled(this), target);
  }

  // .motors.BallhandlerAngles ballhandler_angles = 2;
  if (this->has_ballhandler_angles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ballhandler_angles(this), target);
  }

  // .motors.BallhandlerAngles ballhandler_angle_setpoints = 3;
  if (this->has_ballhandler_angle_setpoints()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::ballhandler_angle_setpoints(this), target);
  }

  // .motors.Status drive_motors_enabled = 4;
  if (this->has_drive_motors_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::drive_motors_enabled(this), target);
  }

  // .motors.RobotVector robot_velocity = 5;
  if (this->has_robot_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::robot_velocity(this), target);
  }

  // .motors.RobotVector robot_position = 6;
  if (this->has_robot_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::robot_position(this), target);
  }

  // .motors.RobotVector robot_velocity_setpoint = 7;
  if (this->has_robot_velocity_setpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::robot_velocity_setpoint(this), target);
  }

  // .motors.Status software_on = 8;
  if (this->has_software_on()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::software_on(this), target);
  }

  // .motors.Status inplay = 9;
  if (this->has_inplay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::inplay(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:motors.Publish)
  return target;
}

size_t Publish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:motors.Publish)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .motors.Status ballhandlers_enabled = 1;
  if (this->has_ballhandlers_enabled()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ballhandlers_enabled_);
  }

  // .motors.BallhandlerAngles ballhandler_angles = 2;
  if (this->has_ballhandler_angles()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ballhandler_angles_);
  }

  // .motors.BallhandlerAngles ballhandler_angle_setpoints = 3;
  if (this->has_ballhandler_angle_setpoints()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ballhandler_angle_setpoints_);
  }

  // .motors.Status drive_motors_enabled = 4;
  if (this->has_drive_motors_enabled()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *drive_motors_enabled_);
  }

  // .motors.RobotVector robot_velocity = 5;
  if (this->has_robot_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *robot_velocity_);
  }

  // .motors.RobotVector robot_position = 6;
  if (this->has_robot_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *robot_position_);
  }

  // .motors.RobotVector robot_velocity_setpoint = 7;
  if (this->has_robot_velocity_setpoint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *robot_velocity_setpoint_);
  }

  // .motors.Status software_on = 8;
  if (this->has_software_on()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *software_on_);
  }

  // .motors.Status inplay = 9;
  if (this->has_inplay()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *inplay_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Publish::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:motors.Publish)
  GOOGLE_DCHECK_NE(&from, this);
  const Publish* source =
      ::google::protobuf::DynamicCastToGenerated<Publish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:motors.Publish)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:motors.Publish)
    MergeFrom(*source);
  }
}

void Publish::MergeFrom(const Publish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:motors.Publish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ballhandlers_enabled()) {
    mutable_ballhandlers_enabled()->::motors::Status::MergeFrom(from.ballhandlers_enabled());
  }
  if (from.has_ballhandler_angles()) {
    mutable_ballhandler_angles()->::motors::BallhandlerAngles::MergeFrom(from.ballhandler_angles());
  }
  if (from.has_ballhandler_angle_setpoints()) {
    mutable_ballhandler_angle_setpoints()->::motors::BallhandlerAngles::MergeFrom(from.ballhandler_angle_setpoints());
  }
  if (from.has_drive_motors_enabled()) {
    mutable_drive_motors_enabled()->::motors::Status::MergeFrom(from.drive_motors_enabled());
  }
  if (from.has_robot_velocity()) {
    mutable_robot_velocity()->::motors::RobotVector::MergeFrom(from.robot_velocity());
  }
  if (from.has_robot_position()) {
    mutable_robot_position()->::motors::RobotVector::MergeFrom(from.robot_position());
  }
  if (from.has_robot_velocity_setpoint()) {
    mutable_robot_velocity_setpoint()->::motors::RobotVector::MergeFrom(from.robot_velocity_setpoint());
  }
  if (from.has_software_on()) {
    mutable_software_on()->::motors::Status::MergeFrom(from.software_on());
  }
  if (from.has_inplay()) {
    mutable_inplay()->::motors::Status::MergeFrom(from.inplay());
  }
}

void Publish::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:motors.Publish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Publish::CopyFrom(const Publish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:motors.Publish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Publish::IsInitialized() const {
  return true;
}

void Publish::Swap(Publish* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Publish::InternalSwap(Publish* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ballhandlers_enabled_, other->ballhandlers_enabled_);
  swap(ballhandler_angles_, other->ballhandler_angles_);
  swap(ballhandler_angle_setpoints_, other->ballhandler_angle_setpoints_);
  swap(drive_motors_enabled_, other->drive_motors_enabled_);
  swap(robot_velocity_, other->robot_velocity_);
  swap(robot_position_, other->robot_position_);
  swap(robot_velocity_setpoint_, other->robot_velocity_setpoint_);
  swap(software_on_, other->software_on_);
  swap(inplay_, other->inplay_);
}

::google::protobuf::Metadata Publish::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Motors_2eproto);
  return ::file_level_metadata_Motors_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace motors
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::motors::Empty* Arena::CreateMaybeMessage< ::motors::Empty >(Arena* arena) {
  return Arena::CreateInternal< ::motors::Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::motors::Status* Arena::CreateMaybeMessage< ::motors::Status >(Arena* arena) {
  return Arena::CreateInternal< ::motors::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::motors::BallhandlerAngles* Arena::CreateMaybeMessage< ::motors::BallhandlerAngles >(Arena* arena) {
  return Arena::CreateInternal< ::motors::BallhandlerAngles >(arena);
}
template<> PROTOBUF_NOINLINE ::motors::RobotVector* Arena::CreateMaybeMessage< ::motors::RobotVector >(Arena* arena) {
  return Arena::CreateInternal< ::motors::RobotVector >(arena);
}
template<> PROTOBUF_NOINLINE ::motors::MotorVector* Arena::CreateMaybeMessage< ::motors::MotorVector >(Arena* arena) {
  return Arena::CreateInternal< ::motors::MotorVector >(arena);
}
template<> PROTOBUF_NOINLINE ::motors::MotorPID* Arena::CreateMaybeMessage< ::motors::MotorPID >(Arena* arena) {
  return Arena::CreateInternal< ::motors::MotorPID >(arena);
}
template<> PROTOBUF_NOINLINE ::motors::Publish* Arena::CreateMaybeMessage< ::motors::Publish >(Arena* arena) {
  return Arena::CreateInternal< ::motors::Publish >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
